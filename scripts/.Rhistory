output_path
opt$output_path
opt$output_path <- "~/Desktop/Desktop_stuff/MyProject/single_cell_analysis/analysis/2_clustering/"
opt$output_path <- "~/Desktop/Desktop_stuff/MyProject/single_cell_analysis/analysis/2_clustering"
###########################
### FIND VARIABLE GENES ###
###########################
output_path <- paste0(opt$output_path,"/variable_genes")
if(!dir.exists(output_path)){dir.create(output_path,recursive = T)}
DATA <- compute_hvgs(DATA,VAR_choice,output_path)
source('~/Box/repos/single_cell_analysis/scripts/compute_hvgs.R')
DATA <- compute_hvgs(DATA,VAR_choice,output_path)
DATA@assays$RNA@var.features
CreateAssayObject()
new.seurat.object <- SetAssayData(
object = DATA,  slot = "counts",
new.data = DATA@assays$RNA@counts, assay = "LLL")
CreateAssayObject()
CreateAssayObject(data = DATA@assays$RNA@counts)
DATA@assays[["LLL"]] <- CreateAssayObject(data = DATA@assays$RNA@counts,min.cells = 0,min.features = 0)
rownames(DATA@meta.data)
out
out <- t(out$corrected)
out
colnames(out) <- rownames(DATA@meta.data)
out
DATA@assays[["integrated"]] <- CreateAssayObject(data = t(out$corrected),min.cells = 0,min.features = 0)
out
DATA@assays[["integrated"]] <- CreateAssayObject(data = out,min.cells = 0,min.features = 0)
myinput$d
rownames(out) <- paste0("dim",1:myinput$d)
DATA@assays[["integrated"]] <- CreateAssayObject(data = out,min.cells = 0,min.features = 0)
DefaultAssay(DATA) <- "integrated"
RunUMAP(DATA)
a <- RunUMAP(DATA,dims = 30)
a <- RunPCA(DATA)
a <- compute_hvgs(DATA)
a <- compute_hvgs(DATA,VAR_choice,output_path)
a <- compute_hvgs(DATA,VAR_choice,output_path)
a <- RunUMAP(DATA)
a <- RunUMAP(DATA,features = paste0("dim",1:myinput$d))
paste0("dim",1:myinput$d)
a <- RunUMAP(a,features = paste0("dim",1:myinput$d))
DATA@assays[["integrated"]] <- CreateAssayObject(data = out,min.cells = 0,min.features = 0)
DefaultAssay(DATA) <- "integrated"
DATA@assays$integrated@data
dim(DATA@assays$integrated@data)
DATA@assays$integrated@data[1:5,1:5]
myinput$d
a <- RunUMAP(a,features = paste0("dim",1:myinput$d))
a <- RunUMAP(DATA,features = paste0("dim",1:myinput$d))
a <- RunUMAP(DATA,features = paste0("dim",1:myinput$d),assay = "integrated")
UMAPPlot(a)
UMAPPlot(a,group.by="orig.ident")
paste0("dim",1:myinput$d)
a <- RunPCA(DATA,features = paste0("dim",1:myinput$d), assay = DefaultAssay(DATA))
beeswarm::beeswarm(DATA@assays$integrated@data)
beeswarm::beeswarm(DATA@assays$integrated@data[,1:10])
DATA@assays$integrated@data[,1:10]
boxplot(DATA@assays$integrated@data[,1:10])
boxplot(DATA@assays$integrated@data[,1:100])
a <-ScaleData(DATA,features = paste0("dim",1:myinput$d), assay = DefaultAssay(DATA))
a <- RunPCA(a)
a <- RunPCA(a,features = paste0("dim",1:myinput$d))
a <- RunUMAP(a)
a <- RunUMAP(a,dim=1:50)
a <- RunUMAP(a,dim=1:20)
UMAPPlot(a,group.by="orig.ident")
a@reductions$umap@cell.embeddings
a <- CreateDimReducObject(embeddings = a@reductions$umap@cell.embeddings,key = "lll")
DATA@assays[["umap"]] <- CreateDimReducObject(embeddings = a@reductions$umap@cell.embeddings)
CreateDimReducObject(embeddings = a@reductions$umap@cell.embeddings)
?CombinePlots
opt$dim_reduct_use <- "UMAP,TSNE"
unlist(strsplit(opt$dim_reduct_use,","))
casefold(unlist(strsplit(opt$dim_reduct_use,",")))
DATA <- readRDS("~/Desktop/Desktop_stuff/MyProject/single_cell_analysis/analysis/2_clustering/Seurat_object.rds")
DATA
source('~/Box/repos/single_cell_analysis/scripts/compute_hvgs.R')
source('~/Box/repos/single_cell_analysis/scripts/compute_hvgs.R')
source('~/Box/repos/single_cell_analysis/scripts/compute_hvgs.R')
hvgs
log2(hvgs$bio+1)
quantile(log2(hvgs$bio+1),.9)
?quantile
source('~/Box/repos/single_cell_analysis/scripts/compute_hvgs.R')
source('~/Box/repos/single_cell_analysis/scripts/compute_hvgs.R')
source('~/Box/repos/single_cell_analysis/scripts/compute_hvgs.R')
DATA <- ScaleData(DATA,vars.to.regress = vars, assay = DefaultAssay(DATA))
opt$regress <- 'nUMI,percent.mito,S.Score,G2M.Score'
vars <- as.character(unlist(strsplit(opt$regress,",")))
DATA <- ScaleData(DATA,vars.to.regress = vars, assay = DefaultAssay(DATA))
DATA <- RunPCA(DATA, do.print = F, pcs.compute = 50, assay = DefaultAssay(DATA))
colnames(DATA@meta.data)
colnames(DATA@meta.data)
library(ggplot2)
?ggsave
casefold(unlist(strsplit(opt$dim_reduct_use,",")))
mtdt
#########################################
### Plotting Dimensionality Reduction ###
#########################################
mtdt <- c("nCount_RNA","nFeature_RNA","S.Score","G2M.Score","percent_rpl","percent_rps","percent_mt-")
mtdt <- mtdt[mtdt %in% colnames(DATA@meta.data)]
mtdt
FeaturePlot(object = DATA, features = mtdt, cols = col_scale,pt.size = .5,reduction = "pca")
### DEFINE PATH TO LOCAL FILES
#---------
col_scale <- c("grey85","navy")
FeaturePlot(object = DATA, features = mtdt, cols = col_scale,pt.size = .5,reduction = "pca")
temp <- FeaturePlot(object = DATA, features = mtdt, cols = col_scale,pt.size = .5,reduction = "pca")
ggsave(temp,filename = "PCA_metadata2.png", path = paste0(opt$output_path,"/PCA_plots"),scale = 1)
ggsave(temp,filename = "PCA_metadata2.png", path = paste0(opt$output_path,"/PCA_plots"),scale = 1)
ceiling(length(mtdt)/5)
mtdt
ggsave(temp,filename = "PCA_metadata2.png", path = paste0(opt$output_path,"/PCA_plots"), dpi = 300,units = "mm",width = 200*5,height = 200*ceiling(length(mtdt)/5) )
temp <- FeaturePlot(object = DATA, features = mtdt, cols = col_scale,pt.size = .5,reduction = "pca",ncol = 5)
ggsave(temp,filename = "PCA_metadata2.png", path = paste0(opt$output_path,"/PCA_plots"), dpi = 300,units = "mm",width = 200*5,height = 200*ceiling(length(mtdt)/5) )
ggsave(temp,filename = "PCA_metadata2.png", path = paste0(opt$output_path,"/PCA_plots"), dpi = 150,units = "mm",width = 200*5,height = 200*ceiling(length(mtdt)/5) )
ggsave(temp,filename = "PCA_metadata2.png", path = paste0(opt$output_path,"/PCA_plots"), dpi = 150,units = "mm",width = 200*5,height = 220*ceiling(length(mtdt)/5) )
ggsave(temp,filename = "PCA_metadata2.png", path = paste0(opt$output_path,"/PCA_plots"), dpi = 150,units = "mm",width = 220*5,height = 200*ceiling(length(mtdt)/5) )
c("pca",casefold(unlist(strsplit(opt$dim_reduct_use,","))))
j <- as.character(unlist(strsplit(opt$columns_metadata,",")))
opt$columns_metadata <- 'Sequencing_ID,Sample_Name,Sample_ID,Batch,Group'
j <- as.character(unlist(strsplit(opt$columns_metadata,",")))
temp2 <- DimPlot(DATA,dims = 1:2,reduction = "pca",group.by = j,pt.size = .3,ncol = 5)
ggsave(temp2,filename = paste0(i,"_metadata_factors.png"), path = paste0(opt$output_path,"/",i,"_plots"), dpi = 150,units = "mm",width = 220*5,height = 200*ceiling(length(mtdt)/5) )
ggsave(temp2,filename = paste0(i,"_metadata_factors.png"), path = paste0(opt$output_path,"/",i,"_plots"), dpi = 150,units = "mm",width = 220*5,height = 200*ceiling(length(j)/5) )
i
#########################################
### Plotting Dimensionality Reduction ###
#########################################
mtdt <- c("nCount_RNA","nFeature_RNA","S.Score","G2M.Score","percent_rpl","percent_rps","percent_mt-")
mtdt <- mtdt[mtdt %in% colnames(DATA@meta.data)]
j <- as.character(unlist(strsplit(opt$columns_metadata,",")))
i <- "pca"
temp <- FeaturePlot(object = DATA, features = mtdt, cols = col_scale,pt.size = .5,reduction = i,ncol = 5)
ggsave(temp,filename = paste0(i,"_metadata.png"), path = paste0(opt$output_path,"/",i,"_plots"), dpi = 150,units = "mm",width = 220*5,height = 200*ceiling(length(mtdt)/5) )
temp2 <- DimPlot(DATA,dims = 1:2,reduction = i,group.by = j,pt.size = .3,ncol = 5)
ggsave(temp2,filename = paste0(i,"_metadata_factors_dim1_dim2.png"), path = paste0(opt$output_path,"/",i,"_plots"), dpi = 150,units = "mm",width = 220*5,height = 200*ceiling(length(j)/5) )
if(i == "pca"){
temp <- FeaturePlot(object = DATA, features = mtdt, cols = col_scale,pt.size = .5,reduction = i,ncol = 5,dims = 3:4)
ggsave(temp,filename = paste0(i,"_metadata_dim3_dim4.png"), path = paste0(opt$output_path,"/",i,"_plots"), dpi = 150,units = "mm",width = 220*5,height = 200*ceiling(length(mtdt)/5) )
temp2 <- DimPlot(DATA,dims = 3:4,reduction = i,group.by = j,pt.size = .3,ncol = 5)
ggsave(temp2,filename = paste0(i,"_metadata_factors_dim3_dim4.png"), path = paste0(opt$output_path,"/",i,"_plots"), dpi = 150,units = "mm",width = 220*5,height = 200*ceiling(length(j)/5) )
}
ggsave(temp,filename = paste0(i,"_metadata_dim1_dim2.png"), path = paste0(opt$output_path,"/",i,"_plots"), dpi = 150,units = "mm",width = 220*5,height = 200*ceiling(length(mtdt)/5) )
mtdt <- c("nCount_RNA","nFeature_RNA","S.Score","G2M.Score","percent_rpl","percent_rps","percent_mt-")
mtdt <- mtdt[mtdt %in% colnames(DATA@meta.data)]
j <- as.character(unlist(strsplit(opt$columns_metadata,",")))
for(i in c("pca",casefold(unlist(strsplit(opt$dim_reduct_use,","))))){
temp <- FeaturePlot(object = DATA, features = mtdt, cols = col_scale,pt.size = .5,reduction = i,ncol = 5,dims = 1:2)
ggsave(temp,filename = paste0(i,"_metadata_dim1_dim2.png"), path = paste0(opt$output_path,"/",i,"_plots"), dpi = 150,units = "mm",width = 220*5,height = 200*ceiling(length(mtdt)/5) )
temp2 <- DimPlot(DATA,dims = 1:2,reduction = i,group.by = j,pt.size = .3,ncol = 5)
ggsave(temp2,filename = paste0(i,"_metadata_factors_dim1_dim2.png"), path = paste0(opt$output_path,"/",i,"_plots"), dpi = 150,units = "mm",width = 220*5,height = 200*ceiling(length(j)/5) )
if(i == "pca"){
temp <- FeaturePlot(object = DATA, features = mtdt, cols = col_scale,pt.size = .5,reduction = i,ncol = 5,dims = 3:4)
ggsave(temp,filename = paste0(i,"_metadata_dim3_dim4.png"), path = paste0(opt$output_path,"/",i,"_plots"), dpi = 150,units = "mm",width = 220*5,height = 200*ceiling(length(mtdt)/5) )
temp2 <- DimPlot(DATA,dims = 3:4,reduction = i,group.by = j,pt.size = .3,ncol = 5)
ggsave(temp2,filename = paste0(i,"_metadata_factors_dim3_dim4.png"), path = paste0(opt$output_path,"/",i,"_plots"), dpi = 150,units = "mm",width = 220*5,height = 200*ceiling(length(j)/5) )
}
}
opt$dim_reduct_use
casefold(unlist(strsplit(opt$dim_reduct_use,",")))
"tsne" %in% casefold(unlist(strsplit(opt$dim_reduct_use,",")))
if(!dir.exists(paste0(opt$output_path,"/tSNE_plots"))){dir.create(paste0(opt$output_path,"/tSNE_plots"),recursive = T)}
opt$output_path
cat("\nPre-computed tSNE found and will be used:\n",paste0(opt$output_path,"/tSNE_plots/tSNE_coordinates.csv"),"\n")
DATA@assays[["tsne"]] <- CreateDimReducObject(embeddings = as.matrix(read.csv2(paste0(opt$output_path,"/tSNE_plots/tSNE_coordinates.csv"),row.names = 1)),key = "tSNE_")
DATA <- RunTSNE(object = DATA, perplexity=30, max_iter=2000,theta=0.1,eta=2000,exaggeration_factor=12,dims.use = 1:top_PCs,verbose = T,num_threads=0)
top_PCs <- 15
DATA <- RunTSNE(object = DATA, perplexity=30, max_iter=2000,theta=0.1,eta=2000,exaggeration_factor=12,dims.use = 1:top_PCs,verbose = T,num_threads=0)
?RunTSNE
DATA <- RunTSNE(object = DATA, perplexity=30, tsne.method="FIt-SNE", max_iter=2000,theta=0.1,eta=2000,exaggeration_factor=12,dims.use = 1:top_PCs,verbose = T,num_threads=0)
write.csv2(DATA@reductions$tsne@cell.embeddings, paste0(opt$output_path,"/tSNE_plots/tSNE_coordinates.csv"))}
if( "tsne" %in% casefold(unlist(strsplit(opt$dim_reduct_use,",")))){
cat("\n### Running BH-tSNE ###\n")
if(!dir.exists(paste0(opt$output_path,"/tSNE_plots"))){dir.create(paste0(opt$output_path,"/tSNE_plots"),recursive = T)}
if(file.exists(paste0(opt$output_path,"/tSNE_plots/tSNE_coordinates.csv"))){
cat("\nPre-computed tSNE found and will be used:\n",paste0(opt$output_path,"/tSNE_plots/tSNE_coordinates.csv"),"\n")
DATA@assays[["tsne"]] <- CreateDimReducObject(embeddings = as.matrix(read.csv2(paste0(opt$output_path,"/tSNE_plots/tSNE_coordinates.csv"),row.names = 1)),key = "tSNE_")
} else { cat("\nPre-computed tSNE NOT found. Computing tSNE ...\n")
DATA <- RunTSNE(object = DATA, perplexity=30, max_iter=2000,theta=0.1,eta=2000,exaggeration_factor=12,dims.use = 1:top_PCs,verbose = T,num_threads=0)
write.csv2(DATA@reductions$tsne@cell.embeddings, paste0(opt$output_path,"/tSNE_plots/tSNE_coordinates.csv"))}
}
CreateDimReducObject(embeddings = as.matrix(read.csv2(paste0(opt$output_path,"/tSNE_plots/tSNE_coordinates.csv"),row.names = 1)),key = "tSNE_")
if( "umap" %in% casefold(unlist(strsplit(opt$dim_reduct_use,",")))){
cat("\n### Running UMAP ###\n")
if(!dir.exists(paste0(opt$output_path,"/UMAP_plots"))){dir.create(paste0(opt$output_path,"/UMAP_plots"),recursive = T)}
if(file.exists(paste0(opt$output_path,"/UMAP_plots/UMAP_coordinates.csv"))){
cat("\nPre-computed UMAP found and will be used:\n",paste0(opt$output_path,"/UMAP_plots/UMAP_coordinates.csv"),"\n")
DATA@assays[["umap"]] <- CreateDimReducObject(embeddings = as.matrix(read.csv2(paste0(opt$output_path,"/UMAP_plots/UMAP_coordinates.csv"),row.names = 1)),key = "UMAP_")
} else { cat("\nPre-computed tSNE NOT found. Computing tSNE ...\n")
DATA <- RunUMAP(object = DATA, assay = DefaultAssay(DATA), n.neighbors = 50, dims = 1:top_PCs,min.dist = 0.001, n.components = 2, verbose = T,num_threads=0)
write.csv2(DATA@reductions$umap@cell.embeddings, paste0(opt$output_path,"/UMAP_plots/UMAP_coordinates.csv"))}
}
mtdt <- c("nCount_RNA","nFeature_RNA","S.Score","G2M.Score","percent_rpl","percent_rps","percent_mt-")
mtdt <- mtdt[mtdt %in% colnames(DATA@meta.data)]
j <- as.character(unlist(strsplit(opt$columns_metadata,",")))
for(i in c("pca",casefold(unlist(strsplit(opt$dim_reduct_use,","))))){
temp <- FeaturePlot(object = DATA, features = mtdt, cols = col_scale,pt.size = .5,reduction = i,ncol = 5,dims = 1:2)
ggsave(temp,filename = paste0(i,"_metadata_dim1_dim2.png"), path = paste0(opt$output_path,"/",i,"_plots"), dpi = 150,units = "mm",width = 220*5,height = 200*ceiling(length(mtdt)/5) )
temp2 <- DimPlot(DATA,dims = 1:2,reduction = i,group.by = j,pt.size = .3,ncol = 5)
ggsave(temp2,filename = paste0(i,"_metadata_factors_dim1_dim2.png"), path = paste0(opt$output_path,"/",i,"_plots"), dpi = 150,units = "mm",width = 220*5,height = 200*ceiling(length(j)/5) )
if(i == "pca"){
temp <- FeaturePlot(object = DATA, features = mtdt, cols = col_scale,pt.size = .5,reduction = i,ncol = 5,dims = 3:4)
ggsave(temp,filename = paste0(i,"_metadata_dim3_dim4.png"), path = paste0(opt$output_path,"/",i,"_plots"), dpi = 150,units = "mm",width = 220*5,height = 200*ceiling(length(mtdt)/5) )
temp2 <- DimPlot(DATA,dims = 3:4,reduction = i,group.by = j,pt.size = .3,ncol = 5)
ggsave(temp2,filename = paste0(i,"_metadata_factors_dim3_dim4.png"), path = paste0(opt$output_path,"/",i,"_plots"), dpi = 150,units = "mm",width = 220*5,height = 200*ceiling(length(j)/5) )
}
}
ggsave(temp,filename = paste0(i,"_metadata_dim1_dim2.png"), path = paste0(opt$output_path,"/",i,"_plots"), dpi = 300,units = "mm",width = 220*5,height = 200*ceiling(length(mtdt)/5) )
ggsave(temp2,filename = paste0(i,"_metadata_factors_dim1_dim2.png"), path = paste0(opt$output_path,"/",i,"_plots"), dpi = 300,units = "mm",width = 220*5,height = 200*ceiling(length(j)/5) )
ggsave(temp,filename = paste0(i,"_metadata_dim1_dim2.png"), path = paste0(opt$output_path,"/",i,"_plots"), dpi = 300,units = "mm",width = 160*5,height = 150*ceiling(length(mtdt)/5) )
temp <- FeaturePlot(object = DATA, features = mtdt, cols = col_scale,pt.size = .5,reduction = i,ncol = 5,dims = 1:2)
ggsave(temp,filename = paste0(i,"_metadata_dim1_dim2.png"), path = paste0(opt$output_path,"/",i,"_plots"), dpi = 300,units = "mm",width = 160*5,height = 150*ceiling(length(mtdt)/5) )
temp2 <- DimPlot(DATA,dims = 1:2,reduction = i,group.by = j,pt.size = .3,ncol = 5)
ggsave(temp2,filename = paste0(i,"_metadata_factors_dim1_dim2.png"), path = paste0(opt$output_path,"/",i,"_plots"), dpi = 300,units = "mm",width = 160*5,height = 150*ceiling(length(j)/5) )
ggsave(temp,filename = paste0(i,"_metadata_dim1_dim2_50.png"), path = paste0(opt$output_path,"/",i,"_plots"), dpi = 50,units = "mm",width = 160*5,height = 150*ceiling(length(mtdt)/5) )
ggsave(temp,filename = paste0(i,"_metadata_dim1_dim2_150.png"), path = paste0(opt$output_path,"/",i,"_plots"), dpi = 150,units = "mm",width = 160*5,height = 150*ceiling(length(mtdt)/5) )
ggsave(temp,filename = paste0(i,"_metadata_dim1_dim2_300.png"), path = paste0(opt$output_path,"/",i,"_plots"), dpi = 300,units = "mm",width = 160*5,height = 150*ceiling(length(mtdt)/5) )
mtdt <- c("nCount_RNA","nFeature_RNA","S.Score","G2M.Score","percent_rpl","percent_rps","percent_mt-")
mtdt <- mtdt[mtdt %in% colnames(DATA@meta.data)]
j <- as.character(unlist(strsplit(opt$columns_metadata,",")))
for(i in c("pca",casefold(unlist(strsplit(opt$dim_reduct_use,","))))){
temp <- FeaturePlot(object = DATA, features = mtdt, cols = col_scale,pt.size = .5,reduction = i,ncol = 5,dims = 1:2)
ggsave(temp,filename = paste0(i,"_metadata_dim1_dim2_300.png"), path = paste0(opt$output_path,"/",i,"_plots"), dpi = 300,units = "mm",width = 170*5,height = 150*ceiling(length(mtdt)/5) )
temp2 <- DimPlot(DATA,dims = 1:2,reduction = i,group.by = j,pt.size = .3,ncol = 5)
ggsave(temp2,filename = paste0(i,"_metadata_factors_dim1_dim2.png"), path = paste0(opt$output_path,"/",i,"_plots"), dpi = 300,units = "mm",width = 170*5,height = 150*ceiling(length(j)/5) )
if(i == "pca"){
temp <- FeaturePlot(object = DATA, features = mtdt, cols = col_scale,pt.size = .5,reduction = i,ncol = 5,dims = 3:4)
ggsave(temp,filename = paste0(i,"_metadata_dim3_dim4.png"), path = paste0(opt$output_path,"/",i,"_plots"), dpi = 300,units = "mm",width = 170*5,height = 150*ceiling(length(mtdt)/5) )
temp2 <- DimPlot(DATA,dims = 3:4,reduction = i,group.by = j,pt.size = .3,ncol = 5)
ggsave(temp2,filename = paste0(i,"_metadata_factors_dim3_dim4.png"), path = paste0(opt$output_path,"/",i,"_plots"), dpi = 300,units = "mm",width = 170*5,height = 150*ceiling(length(j)/5) )
}
}
DATA <- FindNeighbors(DATA,reduction = "pca",dims = 1:top_PCs,k.param = 50)
ll <- igraph::layout_nicely(DATA@graphs$CCA_snn,dim = 2)
DATA@graphs$CCA_snn
DATA@neighbors
DATA@graphs$CCA_snn
g <- igraph::graph_from_adjacency_matrix(DATA@graphs$CCA_snn)
net <- graph.adjacency(adjmatrix = DATA@graphs$CCA_snn, mode = "undirected", weighted = TRUE, diag = FALSE)
net <- igraph::graph.adjacency(adjmatrix = DATA@graphs$CCA_snn, mode = "undirected", weighted = TRUE, diag = FALSE)
g
g <- igraph::graph_from_adjacency_matrix(DATA@graphs$CCA_snn,weighted = T, mode = "undirected",diag = F)
g <- igraph::graph_from_adjacency_matrix(DATA@graphs$CCA_snn,weighted = T,diag = F)
g
ll <- igraph::layout_nicely(g,dim = 2)
ll <- igraph::layout_with_drl(g,dim = 2)
E(graph = net)$weight
library(igraph)
E(graph = net)$weight
E(graph = g)$weight
hist(E(g)$weight)
hist(E(g)$weight,breaks=100)
g <- igraph::graph_from_adjacency_matrix(DATA@graphs$CCA_snn,weighted = T)
hist(E(g)$weight,breaks=1000)
log(hist(E(g)$weight,breaks=1000)+1)
hist(log(E(g)$weight+1),breaks=1000)
mm <- as.matrix(DATA@graphs$CCA_snn)
mm[1:5,1:5]
DATA@graphs$CCA_snn
mm[1:20,1:20]
DATA <- FindNeighbors(DATA)
g <- igraph::graph_from_adjacency_matrix(as.matrix(DATA@graphs$CCA_snn),weighted = T,diag = F)
g
ll <- igraph::layout_nicely(g,dim = 2)
plot.igraph(x = net, layout = DATA@reductions$umap@cell.embeddings, edge.width = E(graph = net)$weight/2, vertex.label = NA,
edge.color = colorRampPalette(c("grey90","black"))(50)[round(E(graph = net)$weight*49+1)],
vertex.size = 3,vertex.frame.color=hue_pal(l=50, c=80)(length(levels(DATA@orig.ident)))[DATA@orig.ident],
vertex.color = hue_pal()(length(levels(DATA@orig.ident)))[DATA@orig.ident])
plot.igraph(x = g, layout = DATA@reductions$umap@cell.embeddings, edge.width = E(graph = g)$weight/2, vertex.label = NA,
edge.color = colorRampPalette(c("grey90","black"))(50)[round(E(graph = g)$weight*49+1)],
vertex.size = 3,vertex.frame.color=hue_pal(l=50, c=80)(length(levels(DATA@orig.ident)))[DATA@orig.ident],
vertex.color = hue_pal()(length(levels(DATA@orig.ident)))[DATA@orig.ident])
library(scales)
plot.igraph(x = g, layout = DATA@reductions$umap@cell.embeddings, edge.width = E(graph = g)$weight/2, vertex.label = NA,
edge.color = colorRampPalette(c("grey90","black"))(50)[round(E(graph = g)$weight*49+1)],
vertex.size = 3,vertex.frame.color=hue_pal(l=50, c=80)(length(levels(DATA@orig.ident)))[DATA@orig.ident],
vertex.color = hue_pal()(length(levels(DATA@orig.ident)))[DATA@orig.ident])
DATA@orig.ident
plot.igraph(x = g, layout = DATA@reductions$umap@cell.embeddings, edge.width = E(graph = g)$weight/2, vertex.label = NA,
edge.color = colorRampPalette(c("grey90","black"))(50)[round(E(graph = g)$weight*49+1)],
vertex.size = 3,vertex.frame.color=hue_pal(l=50, c=80)(length(levels(DATA$orig.ident)))[DATA$orig.ident],
vertex.color = hue_pal()(length(levels(DATA$orig.ident)))[DATA$orig.ident])
length(levels(DATA$orig.ident))
DATA$orig.ident
plot.igraph(x = g, layout = DATA@reductions$umap@cell.embeddings, edge.width = E(graph = g)$weight/2, vertex.label = NA,
edge.color = colorRampPalette(c("grey90","black"))(50)[round(E(graph = g)$weight*49+1)],
vertex.size = 3,vertex.frame.color=hue_pal(l=50, c=80)(length(levels(DATA$orig.ident)))[DATA$orig.ident],
vertex.color = hue_pal()(length(unique(DATA$orig.ident)))[factor(DATA$orig.ident)])
length(unique(DATA$orig.ident))
factor(DATA$orig.ident)
hue_pal()(length(unique(DATA$orig.ident)))
hue_pal()(length(unique(DATA$orig.ident)))[factor(DATA$orig.ident)]
plot.igraph(x = g, layout = DATA@reductions$umap@cell.embeddings, edge.width = E(graph = g)$weight/2, vertex.label = NA,
edge.color = colorRampPalette(c("grey90","black"))(50)[round(E(graph = g)$weight*49+1)],
vertex.size = 3,vertex.frame.color=hue_pal(l=50, c=80)(length(levels(factor(DATA$orig.ident))))[factor(DATA$orig.ident)],
vertex.color = hue_pal()(length(unique(DATA$orig.ident)))[factor(DATA$orig.ident)])
g <- graph_from_adjacency_matrix(as.matrix(DATA@graphs$CCA_snn),weighted = T,diag = F,mode = "undirected")
paste0(opt$output_path,"/",i,"_plots","/",i,"plot_with_SNN_overlay.png")
for(i in c("pca",casefold(unlist(strsplit(opt$dim_reduct_use,","))))){
png(filename = paste0(opt$output_path,"/",i,"_plots","/",i,"_plot_with_SNN_overlay.png"),width = 1200,height =1250,res = 300)
plot.igraph(x = g, layout = DATA@reductions[[i]]@cell.embeddings, edge.width = E(graph = g)$weight/4, vertex.label = NA,
edge.color = colorRampPalette(c("grey90","black"))(50)[round(E(graph = g)$weight*49+1)],
vertex.size = 1,vertex.frame.color=hue_pal(l=50, c=80)(length(levels(factor(DATA$orig.ident))))[factor(DATA$orig.ident)],
vertex.color = hue_pal()(length(unique(DATA$orig.ident)))[factor(DATA$orig.ident)])
invisible(dev.off())
}
for(i in c("pca",casefold(unlist(strsplit(opt$dim_reduct_use,","))))){
png(filename = paste0(opt$output_path,"/",i,"_plots","/",i,"_plot_with_SNN_overlay.png"),width = 1200,height =1250,res = 300)
plot.igraph(x = g, layout = DATA@reductions[[i]]@cell.embeddings[,1:2], edge.width = E(graph = g)$weight/4, vertex.label = NA,
edge.color = colorRampPalette(c("grey90","black"))(50)[round(E(graph = g)$weight*49+1)],
vertex.size = 1,vertex.frame.color=hue_pal(l=50, c=80)(length(levels(factor(DATA$orig.ident))))[factor(DATA$orig.ident)],
vertex.color = hue_pal()(length(unique(DATA$orig.ident)))[factor(DATA$orig.ident)])
invisible(dev.off())
}
DATA <- FindNeighbors(DATA)
g <- graph_from_adjacency_matrix(as.matrix(DATA@graphs$CCA_snn),weighted = T,diag = F,mode = "undirected")
for(i in c("pca",casefold(unlist(strsplit(opt$dim_reduct_use,","))))){
png(filename = paste0(opt$output_path,"/",i,"_plots","/",i,"_plot_with_SNN_overlay.png"),width = 1200,height =1250,res = 600)
plot.igraph(x = g, layout = DATA@reductions[[i]]@cell.embeddings[,1:2], edge.width = E(graph = g)$weight/4, vertex.label = NA,
edge.color = colorRampPalette(c("grey90","black"))(50)[round(E(graph = g)$weight*49+1)],
vertex.size = 1,vertex.frame.color=hue_pal(l=50, c=80)(length(levels(factor(DATA$orig.ident))))[factor(DATA$orig.ident)],
vertex.color = hue_pal()(length(unique(DATA$orig.ident)))[factor(DATA$orig.ident)])
invisible(dev.off())
}
DATA <- FindNeighbors(DATA)
g <- graph_from_adjacency_matrix(as.matrix(DATA@graphs$CCA_snn),weighted = T,diag = F,mode = "undirected")
for(i in c("pca",casefold(unlist(strsplit(opt$dim_reduct_use,","))))){
png(filename = paste0(opt$output_path,"/",i,"_plots","/",i,"_plot_with_SNN_overlay.png"),width = 1200,height =1250,res = 100)
plot.igraph(x = g, layout = DATA@reductions[[i]]@cell.embeddings[,1:2], edge.width = E(graph = g)$weight/4, vertex.label = NA,
edge.color = colorRampPalette(c("grey90","black"))(50)[round(E(graph = g)$weight*49+1)],
vertex.size = 1,vertex.frame.color=hue_pal(l=50, c=80)(length(levels(factor(DATA$orig.ident))))[factor(DATA$orig.ident)],
vertex.color = hue_pal()(length(unique(DATA$orig.ident)))[factor(DATA$orig.ident)])
invisible(dev.off())
}
DATA <- FindNeighbors(DATA)
g <- graph_from_adjacency_matrix(as.matrix(DATA@graphs$CCA_snn),weighted = T,diag = F,mode = "undirected")
for(i in c("pca",casefold(unlist(strsplit(opt$dim_reduct_use,","))))){
png(filename = paste0(opt$output_path,"/",i,"_plots","/",i,"_plot_with_SNN_overlay.png"),width = 2200,height =2250,res = 200)
plot.igraph(x = g, layout = DATA@reductions[[i]]@cell.embeddings[,1:2], edge.width = E(graph = g)$weight/4, vertex.label = NA,
edge.color = colorRampPalette(c("grey90","black"))(50)[round(E(graph = g)$weight*49+1)],
vertex.size = 1,vertex.frame.color=hue_pal(l=50, c=80)(length(levels(factor(DATA$orig.ident))))[factor(DATA$orig.ident)],
vertex.color = hue_pal()(length(unique(DATA$orig.ident)))[factor(DATA$orig.ident)])
invisible(dev.off())
}
DATA <- FindNeighbors(DATA)
g <- graph_from_adjacency_matrix(as.matrix(DATA@graphs$CCA_snn),weighted = T,diag = F,mode = "undirected")
for(i in c("pca",casefold(unlist(strsplit(opt$dim_reduct_use,","))))){
png(filename = paste0(opt$output_path,"/",i,"_plots","/",i,"_plot_with_SNN_overlay.png"),width = 2200,height =2250,res = 500)
plot.igraph(x = g, layout = DATA@reductions[[i]]@cell.embeddings[,1:2], edge.width = E(graph = g)$weight/4, vertex.label = NA,
edge.color = colorRampPalette(c("grey90","black"))(50)[round(E(graph = g)$weight*49+1)],
vertex.size = 1,vertex.frame.color=hue_pal(l=50, c=80)(length(levels(factor(DATA$orig.ident))))[factor(DATA$orig.ident)],
vertex.color = hue_pal()(length(unique(DATA$orig.ident)))[factor(DATA$orig.ident)])
invisible(dev.off())
}
for(i in c("pca",casefold(unlist(strsplit(opt$dim_reduct_use,","))))){
png(filename = paste0(opt$output_path,"/",i,"_plots","/",i,"_plot_with_SNN_overlay.png"),width = 1200,height =1250,res = 10)
plot.igraph(x = g, layout = DATA@reductions[[i]]@cell.embeddings[,1:2], edge.width = E(graph = g)$weight/4, vertex.label = NA,
edge.color = colorRampPalette(c("grey90","black"))(50)[round(E(graph = g)$weight*49+1)],
vertex.size = 1,vertex.frame.color=hue_pal(l=50, c=80)(length(levels(factor(DATA$orig.ident))))[factor(DATA$orig.ident)],
vertex.color = hue_pal()(length(unique(DATA$orig.ident)))[factor(DATA$orig.ident)])
invisible(dev.off())
}
for(i in c("pca",casefold(unlist(strsplit(opt$dim_reduct_use,","))))){
png(filename = paste0(opt$output_path,"/",i,"_plots","/",i,"_plot_with_SNN_overlay.png"),width = 1200,height =1250,res = 100)
plot.igraph(x = g, layout = DATA@reductions[[i]]@cell.embeddings[,1:2], edge.width = E(graph = g)$weight/4, vertex.label = NA,
edge.color = colorRampPalette(c("grey90","black"))(50)[round(E(graph = g)$weight*49+1)],
vertex.size = 1,vertex.frame.color=hue_pal(l=50, c=80)(length(levels(factor(DATA$orig.ident))))[factor(DATA$orig.ident)],
vertex.color = hue_pal()(length(unique(DATA$orig.ident)))[factor(DATA$orig.ident)])
invisible(dev.off())
}
for(i in c("pca",casefold(unlist(strsplit(opt$dim_reduct_use,","))))){
png(filename = paste0(opt$output_path,"/",i,"_plots","/",i,"_plot_with_SNN_overlay.png"),width = 150,height =155,res = 300,units = "mm")
plot.igraph(x = g, layout = DATA@reductions[[i]]@cell.embeddings[,1:2], edge.width = E(graph = g)$weight/4, vertex.label = NA,
edge.color = colorRampPalette(c("grey90","black"))(50)[round(E(graph = g)$weight*49+1)],
vertex.size = 1,vertex.frame.color=hue_pal(l=50, c=80)(length(levels(factor(DATA$orig.ident))))[factor(DATA$orig.ident)],
vertex.color = hue_pal()(length(unique(DATA$orig.ident)))[factor(DATA$orig.ident)])
invisible(dev.off())
}
for(i in c("pca",casefold(unlist(strsplit(opt$dim_reduct_use,","))))){
png(filename = paste0(opt$output_path,"/",i,"_plots","/",i,"_plot_with_SNN_overlay.png"),width = 200,height =205,res = 600,units = "mm")
plot.igraph(x = g, layout = DATA@reductions[[i]]@cell.embeddings[,1:2], edge.width = E(graph = g)$weight/4, vertex.label = NA,
edge.color = colorRampPalette(c("grey90","black"))(50)[round(E(graph = g)$weight*49+1)],
vertex.size = 1,vertex.frame.color=hue_pal(l=50, c=80)(length(levels(factor(DATA$orig.ident))))[factor(DATA$orig.ident)],
vertex.color = hue_pal()(length(unique(DATA$orig.ident)))[factor(DATA$orig.ident)])
invisible(dev.off())
}
for(i in c("pca",casefold(unlist(strsplit(opt$dim_reduct_use,","))))){
png(filename = paste0(opt$output_path,"/",i,"_plots","/",i,"_plot_with_SNN_overlay.png"),width = 200,height =205,res = 600,units = "mm")
plot.igraph(x = g, layout = DATA@reductions[[i]]@cell.embeddings[,1:2], edge.width = E(graph = g)$weight/4, vertex.label = NA,
edge.color = colorRampPalette(c("grey90","black"))(50)[round(E(graph = g)$weight*49+1)],
vertex.size = 1,
vertex.color = hue_pal()(length(unique(DATA$orig.ident)))[factor(DATA$orig.ident)])
invisible(dev.off())
}
for(i in c("pca",casefold(unlist(strsplit(opt$dim_reduct_use,","))))){
png(filename = paste0(opt$output_path,"/",i,"_plots","/",i,"_plot_with_SNN_overlay.png"),width = 200,height =205,res = 600,units = "mm")
plot.igraph(x = g, layout = DATA@reductions[[i]]@cell.embeddings[,1:2], edge.width = E(graph = g)$weight/4, vertex.label = NA,
edge.color = colorRampPalette(c("grey90","black"))(50)[round(E(graph = g)$weight*49+1)],
vertex.size = 1,vertex.frame.color=NA,
vertex.color = hue_pal()(length(unique(DATA$orig.ident)))[factor(DATA$orig.ident)])
invisible(dev.off())
}
for(i in c("pca",casefold(unlist(strsplit(opt$dim_reduct_use,","))))){
png(filename = paste0(opt$output_path,"/",i,"_plots","/",i,"_plot_with_SNN_overlay.png"),width = 200,height =205,res = 600,units = "mm")
plot.igraph(x = g, layout = DATA@reductions[[i]]@cell.embeddings[,1:2], edge.width = E(graph = g)$weight/4, vertex.label = NA,
edge.color = colorRampPalette(c("grey90","black"))(50)[round(E(graph = g)$weight*49+1)],
vertex.size = 1,vertex.frame.color=hue_pal(l=50, c=80)(length(levels(factor(DATA$orig.ident))))[factor(DATA$orig.ident)],
vertex.color = hue_pal()(length(unique(DATA$orig.ident)))[factor(DATA$orig.ident)])
invisible(dev.off())
}
PCHeatmap(DATA)
ggsave(PCHeatmap(DATA,ncol=5),filename = paste0("PCA_heatmap.png"), path = paste0(opt$output_path,"/PCA_plots"), dpi = 300,units = "mm",width = 170*5,height = 150*ceiling(length(j)/5) )
ggsave(PCHeatmap(DATA,ncol=5,dims=1:10),filename = paste0("PCA_heatmap.png"), path = paste0(opt$output_path,"/PCA_plots"), dpi = 300,units = "mm",width = 170*5,height = 150*ceiling(length(j)/5),scale = 2 )
ggsave(PCHeatmap(DATA,ncol=5,dims=1:10),filename = paste0("PCA_heatmap.png"), path = paste0(opt$output_path,"/PCA_plots"), dpi = 500,units = "mm",width = 170*5,height = 150*ceiling(length(j)/5))
PC_heatmap <- PCHeatmap(DATA,ncol=5,dims=1:10)
ggsave(PC_heatmap,filename = paste0("PCA_heatmap.png"), path = paste0(opt$output_path,"/PCA_plots"), dpi = 500,units = "mm",width = 170*5,height = 150*2)
PC_heatmap <- PCHeatmap(DATA,ncol=5,dims=1:10)
ggsave(PC_heatmap,filename = paste0("PCA_heatmap.png"), path = paste0(opt$output_path,"/PCA_plots"), dpi = 500,units = "mm",width = 170*5,height = 150*2)
ggsave(PC_heatmap,filename = paste0("PCA_heatmap.png"), path = paste0(opt$output_path,"/PCA_plots"), dpi = 300,units = "mm",width = 170*5,height = 150*2)
ggsave(PC_heatmap,filename = paste0("PCA_heatmap.png"), path = paste0(opt$output_path,"/PCA_plots"), dpi = 300,units = "mm",width = 170*5,height = 150*5)
paste0("PCA_heatmap.png")
paste0(opt$output_path,"/PCA_plots")
ggsave(PC_heatmap,filename = paste0("PCA_heatmap.png"), path = paste0(opt$output_path,"/PCA_plots"), dpi = 300,units = "mm",width = 170*5,height = 150*5)
dev.off()
dev.off()
ggsave(PC_heatmap,filename = paste0("PCA_heatmap.png"), path = paste0(opt$output_path,"/PCA_plots"), dpi = 300,units = "mm",width = 170*5,height = 150*5)
PC_heatmap <-
ggsave(PCHeatmap(DATA,ncol=5,dims=1:10),filename = paste0("PCA_heatmap.png"), path = paste0(opt$output_path,"/PCA_plots"), dpi = 300,units = "mm",width = 170*5,height = 150*5)
ggsave(PCHeatmap(DATA,ncol=5,dims=1:10),filename = paste0("PCA_heatmap.png"), path = paste0(opt$output_path,"/PCA_plots"), dpi = 300,units = "mm",width = 170*5,height = 150*5)
ggsave(PCHeatmap(DATA,ncol=5,dims=1:10),filename = paste0("PCA_heatmap.png"), path = paste0(opt$output_path,"/PCA_plots"), dpi = 300,units = "mm",width = 150*5,height = 150*2)
#---------
?RunTSNE
DATA <- RunUMAP(object = DATA, tsne.method="FIt-SNE",assay = DefaultAssay(DATA), n.neighbors = 50, dims = 1:top_PCs,min.dist = 0.001, n.components = 2, verbose = T,num_threads=0)
DATA <- RunTSNE(object = DATA, tsne.method="FIt-SNE",assay = DefaultAssay(DATA), n.neighbors = 50, dims = 1:top_PCs,min.dist = 0.001, n.components = 2, verbose = T,num_threads=0)
FindNeighbors
?FindNeighbors
DATA <- FindNeighbors(DATA)
DATA@neighbors
DATA@active.ident
DATA <- FindNeighbors(DATA,assay = DefaultAssay(DATA),graph.name="SNN")
g <- graph_from_adjacency_matrix(as.matrix(DATA@graphs$SNN),weighted = T,diag = F,mode = "undirected")
DATA <- RunTSNE(object = DATA, perplexity=30, max_iter=2000,theta=0.1,eta=2000,exaggeration_factor=12,dims.use = 1:top_PCs,verbose = T,num_threads=0)
head(DATA@assays$RNA@scale.data)
DATA <- FindClusters(object = DATA, reduction.type = "pca", dims.use = 1:top_PCs, resolution = k, print.output = F, k.param=20, nn.eps=0.1)
k <- 1
DATA <- FindClusters(object = DATA, reduction.type = "pca", dims.use = 1:top_PCs, resolution = k, print.output = F, k.param=20, nn.eps=0.1)
seq(.05,2,by=.05)
length(seq(.05,2,by=.05))
if(!dir.exists(paste0(opt$output_path,"/clustering"))){dir.create(paste0(opt$output_path,"/clustering"))}
for(k in seq(.05,2,by=.05)){
DATA <- FindClusters(object = DATA, reduction.type = "pca", dims.use = 1:top_PCs, resolution = k, print.output = F, k.param=20, nn.eps=0.1)
# png(filename = paste0(opt$output_path,"/clustering_SNN/tSNE_res.",k,".png"),width = 700,height = 600,res = 150)
# TSNEPlot(object = DATA, group.by=paste0("res.",k), pt.size = .5, plot.title= paste0("Clustering (res.",k,")"))
# invisible(dev.off())
}
grep("snn",colnames(DATA@meta.data))
colnames(DATA@meta.data)[grep("snn",colnames(DATA@meta.data))]
sort(colnames(DATA@meta.data)[grep("snn",colnames(DATA@meta.data))])
temp2 <- DimPlot(DATA,dims = 1:2,reduction = "umap",group.by = sort(colnames(DATA@meta.data)[grep("snn",colnames(DATA@meta.data))]), pt.size = .3,ncol = 5)
ggsave(temp2,filename = paste0("Clustering_SNN.png"), path = paste0(opt$output_path,"/",i,"_plots"), dpi = 300,units = "mm",width = 170*5,height = 150*ceiling(k/10) )
i
k
length(grep("snn",colnames(DATA@meta.data)))
paste0(opt$output_path,"/clustering")
ggsave(temp2,filename = "clustering_SNN.png", path = paste0(opt$output_path,"/clustering"), dpi = 300,units = "mm",width = 170*5,height = 150*ceiling(length(grep("snn",colnames(DATA@meta.data)))/10) )
temp2 <- DimPlot(DATA,dims = 1:2,reduction = "umap",group.by = sort(colnames(DATA@meta.data)[grep("snn",colnames(DATA@meta.data))]), pt.size = .3,ncol = 8)
ggsave(temp2,filename = "clustering_SNN.png", path = paste0(opt$output_path,"/clustering"), dpi = 300,units = "mm",width = 170*8,height = 150*ceiling(length(grep("snn",colnames(DATA@meta.data)))/8) )
ggsave(temp2,filename = "clustering_SNN.png", path = paste0(opt$output_path,"/clustering"), dpi = 300,units = "mm",width = 170*8,height = 150*ceiling(length(grep("snn",colnames(DATA@meta.data)))/8),limitsize = FALSE )
ggsave(temp2,filename = "clustering_SNN.png", path = paste0(opt$output_path,"/clustering"), dpi = 300,units = "mm",width = 125*8,height = 100*ceiling(length(grep("snn",colnames(DATA@meta.data)))/8),limitsize = FALSE )
ggsave(temp2,filename = "clustering_SNN.png", path = paste0(opt$output_path,"/clustering"), dpi = 300,units = "mm",width = 150*8,height = 100*ceiling(length(grep("snn",colnames(DATA@meta.data)))/8),limitsize = FALSE )
temp2 <- DimPlot(DATA,dims = 1:2,reduction = "umap",group.by = sort(colnames(DATA@meta.data)[grep("snn",colnames(DATA@meta.data))]), pt.size = .3,ncol = 8) + NoAxes()
ggsave(temp2,filename = "clustering_SNN.png", path = paste0(opt$output_path,"/clustering"), dpi = 300,units = "mm",width = 150*8,height = 100*ceiling(length(grep("snn",colnames(DATA@meta.data)))/8),limitsize = FALSE )
sort(colnames(DATA@meta.data)[grep("snn",colnames(DATA@meta.data))])
colnames(DATA@meta.data)
for(k in seq(.05,2,by=.05)){
DATA <- FindClusters(object = DATA, reduction.type = "pca", dims.use = 1:top_PCs, resolution = k, verbose = F,graph.name = "SNN")
}
colnames(DATA@meta.data)
DATA <- RunUMAP(object = DATA, n.neighbors = 50, dims = 1:top_PCs,min.dist = 0.001, n.components = 10, verbose = T,num_threads=0,reduction.name = "UMAP5")
?hclust
DATA <- RunUMAP(object = DATA, n.neighbors = 50, dims = 1:top_PCs,min.dist = 0.001, n.components = 10, verbose = T,num_threads=0,reduction.name = "UMAP10",reduction.key = "umap10_")
d <- dist(DATA@reductions$umap10@cell.embeddings,method = "euclidean")
d <- dist(DATA@reductions$UMAP10@cell.embeddings,method = "euclidean")
hc <- hclust(d,method = "single")
hc <- hclust(d,method = "single")
cl <- cutree(hc,k = k)
DATA <- AddMetaData(DATA,metadata = setNames(cl,colnames(DATA)), paste0("HC_",k))
for(k in 2:50){
d <- dist(DATA@reductions$UMAP10@cell.embeddings,method = "euclidean")
hc <- hclust(d,method = "single")
cl <- cutree(hc,k = k)
DATA <- AddMetaData(DATA,metadata = setNames(cl,colnames(DATA)), paste0("HC_",k))
}
colnames(DATA)
colnames(DATA@meta.data)
i
i <- "umap"
temp2 <- DimPlot(DATA,dims = 1:2,reduction = i,group.by = sort(colnames(DATA@meta.data)[grep("HC_",colnames(DATA@meta.data))]), pt.size = .3,ncol = 8)
ggplot2::ggsave(temp2,filename = paste0("clustering_HC_",i,".png"), path = paste0(opt$output_path,"/clustering"), dpi = 300,units = "mm",width = 140*8,height = 100*ceiling(length(grep("HC_",colnames(DATA@meta.data)))/8),limitsize = FALSE )
colnames(DATA@meta.data)
signif(1:12,2)
signif(1:12,-1)
signif(1:12,-2)
aaa <-  readRDS("~/Downloads/pancreas_v3_files/pancreas_expression_matrix.rds")
met <- readRDS("~/Downloads/pancreas_v3_files/pancreas_metadata.rds")
aaaa <-  CreateSeuratObject(counts = aaa,meta.data = met)
opt$output_path
saveRDS(aaaa, file = paste0("~/Desktop/Desktop_stuff/MyProject/single_cell_analysis/data/Seurat_Pancreas.rds") )
