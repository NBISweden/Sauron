source('~/Box/repos/single_cell_analysis/scripts/compute_hvgs.R')
source('~/Box/repos/single_cell_analysis/scripts/compute_hvgs.R')
source('~/Box/repos/single_cell_analysis/scripts/compute_hvgs.R')
source('~/Box/repos/single_cell_analysis/scripts/compute_hvgs.R')
VAR_choice <- "scran"
for (i in 1:length(DATA.list)) {
DATA.list[[i]] <- NormalizeData(DATA.list[[i]], verbose = FALSE)
DATA.list[[i]] <- compute_hvgs(DATA.list[[i]],VAR_choice,paste0(opt$output_path,"/var_genes_",names(DATA.list)[i]))
}
# select the most informative genes that are shared across all datasets:
universe <- Reduce(intersect, lapply(DATA.list,function(x){x@assays$RNA@var.features}))
universe
lapply(DATA.list,function(x){x@assays$RNA@var.features})
lapply(DATA.list,function(x){sort(x@assays$RNA@var.features}))
lapply(DATA.list,function(x){sort(x@assays$RNA@var.features)})
DATA.list[[1]]@assays$RNA@var.features %in% DATA.list[[2]]@assays$RNA@var.features
DATA.list[[1]]@assays$RNA@var.features %in% DATA.list[[3]]@assays$RNA@var.features
DATA.list[[1]]@assays$RNA@var.features %in% DATA.list[[4]]@assays$RNA@var.features
perc
sort(perc1)
sort(perc1,decreasing = T)
perc
length(perc1)
length(perc)
grep("MALAT1",perc)
source('~/Box/repos/single_cell_analysis/scripts/compute_hvgs.R')
source('~/Box/repos/single_cell_analysis/scripts/compute_hvgs.R')
for (i in 1:length(DATA.list)) {
DATA.list[[i]] <- NormalizeData(DATA.list[[i]], verbose = FALSE)
DATA.list[[i]] <- compute_hvgs(DATA.list[[i]],VAR_choice,paste0(opt$output_path,"/var_genes_",names(DATA.list)[i]))
}
perc1
perc1[perc]
hvgs$percentage <- perc1[perc]
hvgs <- decomposeVar(DATA@assays[[assay]]@data, fit)
fit <- trendVar(DATA@assays[[assay]]@data,loess.args=list(span=0.05))
hvgs <- decomposeVar(DATA@assays[[assay]]@data, fit)
hvgs <- as.data.frame(hvgs[order(hvgs$bio, decreasing=TRUE),])
hvgs$percentage <- perc1[perc]
hvgs
hvgs <- decomposeVar(DATA@assays[[assay]]@data, fit)
hvgs <- as.data.frame(hvgs[order(hvgs$bio, decreasing=TRUE),])
hvgs$percentage <- perc1[rownames(hvgs)]
#The minimum variance. The minimum variance needs to be so that at least 10 of the cells express that gene
n <- ncol(DATA@assays[[assay]]@data)
min_var <- var(c(rep(1, 10 ),rep(0,round( n - (n/100)) )))
hvgs
source('~/Box/repos/single_cell_analysis/scripts/compute_hvgs.R')
min_var <- var(c(rep(1, 10 ),rep(0,round( n - (n/100)) )))
min_var
hvgs$total > min_var
myvars <- rownames(hvgs)[ (hvgs$total > min_var) & (hvgs$bio > y_cut) & (hvgs$FDR < 0.01 ) ]
myvars <- myvars[myvars %in% perc]
myvars <- rownames(hvgs)[ (hvgs$total > min_var) & (hvgs$bio > y_cut) & (hvgs$FDR < 0.01 ) ]
y_cut <- 0.03
min_var <- var(c(rep(1, 10 ),rep(0,round( n - (n/100)) )))
myvars <- rownames(hvgs)[ (hvgs$total > min_var) & (hvgs$bio > y_cut) & (hvgs$FDR < 0.01 ) ]
myvars <- myvars[myvars %in% perc]
hvgs$log.bio.var <- log2(hvgs$bio+1)
hvgs$use <- rownames(hvgs) %in% myvars
plot( c(fit$means), c(fit$vars) ,xlab="mean",ylab="biological variance",pch=16,
col=ifelse(TF ,"red","grey30"),
cex=ifelse(TF ,.5,.2) , main="SCRAN")
TF <- names(fit$means) %in% myvars
plot( c(fit$means), c(fit$vars) ,xlab="mean",ylab="biological variance",pch=16,
col=ifelse(TF ,"red","grey30"),
cex=ifelse(TF ,.5,.2) , main="SCRAN")
curve(fit$trend(x), col="red", lwd=2, add=TRUE)
plot( log2(c(fit$means)), c(fit$vars) ,xlab="mean",ylab="biological variance",pch=16,
col=ifelse(TF ,"red","grey30"),
cex=ifelse(TF ,.5,.2) , main="SCRAN")
par(mfrow=c(1,3))
plot( log2(hvgs$mean) , log2(hvgs$bio+1) ,xlab="log2(mean)",ylab="log2(bio.var+1)",pch=16,
col=ifelse(hvgs$use,"red","grey30"),ylim=c(-0.1,2),
cex=ifelse(hvgs$use,.5,.2) ,main="SCRAN")
plot( hvgs$percentage , log2(hvgs$bio+1) ,xlab="detection rate",ylab="log2(bio.var+1)",pch=16,
col=ifelse(hvgs$use,"red","grey30"),ylim=c(-0.1,2),
cex=ifelse(hvgs$use,.5,.2) ,main="SCRAN")
plot( log2(hvgs$mean), hvgs$percentage,xlab="log2(mean)",ylab="detection rate",pch=16,
col=ifelse(hvgs$use,"red","grey30"),ylim=c(-0.1,1),
cex=ifelse(hvgs$use,.5,.2) ,main="SCRAN")
plot( log2(hvgs$mean), 1-hvgs$percentage,xlab="log2(mean)",ylab="detection rate",pch=16,
col=ifelse(hvgs$use,"red","grey30"),ylim=c(-0.1,1),
cex=ifelse(hvgs$use,.5,.2) ,main="SCRAN")
source('~/Box/repos/single_cell_analysis/scripts/compute_hvgs.R')
par(mfrow=c(1,1))
plot( log2(hvgs$mean), 1-hvgs$percentage,xlab="log2(mean)",ylab="detection rate",pch=16,
col=ifelse(hvgs$use,"red","grey30"),ylim=c(-0.1,1),
cex=ifelse(hvgs$use,.5,.2) ,main="SCRAN")
plot( log2(hvgs$mean) , log2(hvgs$bio+1) ,xlab="log2(mean)",ylab="log2(bio.var+1)",pch=16,
col=ifelse(hvgs$use,"red","grey30"),ylim=c(-0.1,2),
cex=ifelse(hvgs$use,.2,.1) ,main="SCRAN")
plot( hvgs$percentage , log2(hvgs$bio+1) ,xlab="detection rate",ylab="log2(bio.var+1)",pch=16,
col=ifelse(hvgs$use,"red","grey30"),ylim=c(-0.1,2),
cex=ifelse(hvgs$use,.2,.1) ,main="SCRAN")
plot( log2(hvgs$mean), 1-hvgs$percentage,xlab="log2(mean)",ylab="detection rate",pch=16,
col=ifelse(hvgs$use,"red","grey30"),ylim=c(-0.1,1),
cex=ifelse(hvgs$use,.2,.1) ,main="SCRAN")
source('~/Box/repos/single_cell_analysis/scripts/compute_hvgs.R')
y_cut <- 0.05
source('~/Box/repos/single_cell_analysis/scripts/compute_hvgs.R')
source('~/Box/repos/single_cell_analysis/scripts/compute_hvgs.R')
for (i in 1:length(DATA.list)) {
DATA.list[[i]] <- NormalizeData(DATA.list[[i]], verbose = FALSE)
DATA.list[[i]] <- compute_hvgs(DATA.list[[i]],VAR_choice,paste0(opt$output_path,"/var_genes_",names(DATA.list)[i]))
}
source('~/Box/repos/single_cell_analysis/scripts/compute_hvgs.R')
source('~/Box/repos/single_cell_analysis/scripts/compute_hvgs.R')
for (i in 1:length(DATA.list)) {
DATA.list[[i]] <- NormalizeData(DATA.list[[i]], verbose = FALSE)
DATA.list[[i]] <- compute_hvgs(DATA.list[[i]],VAR_choice,paste0(opt$output_path,"/var_genes_",names(DATA.list)[i]))
}
source('~/Box/repos/single_cell_analysis/scripts/compute_hvgs.R')
# select the most informative genes that are shared across all datasets:
universe <- Reduce(intersect, lapply(DATA.list,function(x){x@assays$RNA@var.features}))
universe
lapply(DATA.list,function(x){sort(x@assays$RNA@var.features)})
myinput <- lapply(DATA.list,function(x){x@assays$RNA@data[universe,]})
rm(DATA.list)
print(names(myinput))
if(  is.na(integration_method[3]) ) { myinput[["k"]] <- 20
} else { myinput[["k"]] <- as.numeric(integration_method[3]) }
myinput[["approximate"]] <-  TRUE
myinput[["d"]] <-  50
myinput
#Applying MNN correction on raw counts
out <- do.call(fastMNN,args = myinput)
out
out <- t(out$corrected)
out
colnames(out) <- rownames(DATA@meta.data)
rownames(out) <- paste0("dim",1:myinput$d)
DATA@assays[["integrated"]] <- CreateAssayObject(data = out,min.cells = 0,min.features = 0)
DefaultAssay(DATA) <- "integrated"
DATA@assays$integrated@var.features <- rownames(DATA@assays$integrated@data)
DATA <- RunUMAP(DATA,features = DATA@assays$integrated@var.features)
DATA@assays$integrated@var.features
rownames(DATA@assays$integrated@data)
DATA <- ScaleData(DATA)
DATA <- RunUMAP(DATA, features = DATA@assays$integrated@var.features)
DATA <- RunPCA(DATA)
DATA <- RunUMAP(DATA,dim=1:30)
UMAPPlot(DATA)
UMAPPlot(DATA,group.by="celltype")
source('~/Box/repos/single_cell_analysis/scripts/compute_hvgs.R')
DATA <- RunUMAP(DATA,dim=1:50)
DATA <- RunPCA(DATA,npcs = 50)
DATA <- RunUMAP(DATA,dim=1:50)
DATA <- RunUMAP(DATA,dim=1:49)
UMAPPlot(DATA,group.by="celltype")
source('~/Box/repos/single_cell_analysis/scripts/compute_hvgs.R')
2^1.025
log(2)
source('~/Box/repos/single_cell_analysis/scripts/compute_hvgs.R')
for (i in 1:length(DATA.list)) {
DATA.list[[i]] <- NormalizeData(DATA.list[[i]], verbose = FALSE)
DATA.list[[i]] <- compute_hvgs(DATA.list[[i]],VAR_choice,paste0(opt$output_path,"/var_genes_",names(DATA.list)[i]))
}
DATA.list <- SplitObject(DATA, split.by = integration_method[2])
for (i in 1:length(DATA.list)) {
DATA.list[[i]] <- NormalizeData(DATA.list[[i]], verbose = FALSE)
DATA.list[[i]] <- compute_hvgs(DATA.list[[i]],VAR_choice,paste0(opt$output_path,"/var_genes_",names(DATA.list)[i]))
}
DATA.list <- SplitObject(DATA, split.by = integration_method[2])
for (i in 1:length(DATA.list)) {
DATA.list[[i]] <- NormalizeData(DATA.list[[i]], verbose = FALSE)
DATA.list[[i]] <- compute_hvgs(DATA.list[[i]],VAR_choice,paste0(opt$output_path,"/var_genes_",names(DATA.list)[i]))
}
for (i in 1:length(DATA.list)) {
DATA.list[[i]] <- NormalizeData(DATA.list[[i]], verbose = FALSE)
DATA.list[[i]] <- compute_hvgs(DATA.list[[i]],VAR_choice,paste0(opt$output_path,"/var_genes_",names(DATA.list)[i]))
}
for (i in 1:length(DATA.list)) {
DATA.list[[i]] <- NormalizeData(DATA.list[[i]], verbose = FALSE)
DATA.list[[i]] <- compute_hvgs(DATA.list[[i]],VAR_choice,paste0(opt$output_path,"/var_genes_",names(DATA.list)[i]))
}
for (i in 1:length(DATA.list)) {
DATA.list[[i]] <- NormalizeData(DATA.list[[i]], verbose = FALSE)
DATA.list[[i]] <- compute_hvgs(DATA.list[[i]],VAR_choice,paste0(opt$output_path,"/var_genes_",names(DATA.list)[i]))
}
for (i in 1:length(DATA.list)) {
DATA.list[[i]] <- NormalizeData(DATA.list[[i]], verbose = FALSE)
DATA.list[[i]] <- compute_hvgs(DATA.list[[i]],VAR_choice,paste0(opt$output_path,"/var_genes_",names(DATA.list)[i]))
}
for (i in 1:length(DATA.list)) {
DATA.list[[i]] <- NormalizeData(DATA.list[[i]], verbose = FALSE)
DATA.list[[i]] <- compute_hvgs(DATA.list[[i]],VAR_choice,paste0(opt$output_path,"/var_genes_",names(DATA.list)[i]))
}
for (i in 1:length(DATA.list)) {
DATA.list[[i]] <- NormalizeData(DATA.list[[i]], verbose = FALSE)
DATA.list[[i]] <- compute_hvgs(DATA.list[[i]],VAR_choice,paste0(opt$output_path,"/var_genes_",names(DATA.list)[i]))
}
for (i in 1:length(DATA.list)) {
DATA.list[[i]] <- NormalizeData(DATA.list[[i]], verbose = FALSE)
DATA.list[[i]] <- compute_hvgs(DATA.list[[i]],VAR_choice,paste0(opt$output_path,"/var_genes_",names(DATA.list)[i]))
}
for (i in 1:length(DATA.list)) {
DATA.list[[i]] <- NormalizeData(DATA.list[[i]], verbose = FALSE)
DATA.list[[i]] <- compute_hvgs(DATA.list[[i]],VAR_choice,paste0(opt$output_path,"/var_genes_",names(DATA.list)[i]))
}
DATA.list
for (i in 1:length(DATA.list)) {
#DATA.list[[i]] <- NormalizeData(DATA.list[[i]], verbose = FALSE)
DATA.list[[i]] <- compute_hvgs(DATA.list[[i]],VAR_choice,paste0(opt$output_path,"/var_genes_",names(DATA.list)[i]))
}
source('~/Box/repos/single_cell_analysis/scripts/compute_hvgs.R')
source('~/Box/repos/single_cell_analysis/scripts/compute_hvgs.R')
DATA <- readRDS("~/Desktop/Desktop_stuff/MyProject/single_cell_analysis/analysis/1_qc/Filt_Seurat_Object.rds")
DATA.list <- SplitObject(DATA, split.by = integration_method[2])
for (i in 1:length(DATA.list)) {
DATA.list[[i]] <- NormalizeData(DATA.list[[i]], verbose = FALSE)
DATA.list[[i]] <- compute_hvgs(DATA.list[[i]],VAR_choice,paste0(opt$output_path,"/var_genes_",names(DATA.list)[i]))
}
DATA@active.assay
VAR_choice
opt$output_path
names(DATA.list)
for (i in 1:length(DATA.list)) {
DATA.list[[i]] <- NormalizeData(DATA.list[[i]], verbose = FALSE)
DATA.list[[i]] <- compute_hvgs(DATA.list[[i]],VAR_choice,paste0(opt$output_path,"/var_genes_",names(DATA.list)[i]))
}
source('~/Box/repos/single_cell_analysis/scripts/compute_hvgs.R')
source('~/Box/repos/single_cell_analysis/scripts/compute_hvgs.R')
source('~/Box/repos/single_cell_analysis/scripts/compute_hvgs.R')
source('~/Box/repos/single_cell_analysis/scripts/compute_hvgs.R')
source('~/Box/repos/single_cell_analysis/scripts/compute_hvgs.R')
source('~/Box/repos/single_cell_analysis/scripts/compute_hvgs.R')
source('~/Box/repos/single_cell_analysis/scripts/compute_hvgs.R')
source('~/Box/repos/single_cell_analysis/scripts/compute_hvgs.R')
source('~/Box/repos/single_cell_analysis/scripts/compute_hvgs.R')
for (i in 1:length(DATA.list)) {
DATA.list[[i]] <- NormalizeData(DATA.list[[i]], verbose = FALSE)
DATA.list[[i]] <- compute_hvgs(DATA.list[[i]],VAR_choice,paste0(opt$output_path,"/var_genes_",names(DATA.list)[i]))
}
source('~/Box/repos/single_cell_analysis/scripts/compute_hvgs.R')
for (i in 1:length(DATA.list)) {
DATA.list[[i]] <- NormalizeData(DATA.list[[i]], verbose = FALSE)
DATA.list[[i]] <- compute_hvgs(DATA.list[[i]],VAR_choice,paste0(opt$output_path,"/var_genes_",names(DATA.list)[i]))
}
for (i in 1:length(DATA.list)) {
DATA.list[[i]] <- NormalizeData(DATA.list[[i]], verbose = FALSE)
DATA.list[[i]] <- compute_hvgs(DATA.list[[i]],VAR_choice,paste0(opt$output_path,"/var_genes_",names(DATA.list)[i]))
}
source('~/Box/repos/single_cell_analysis/scripts/compute_hvgs.R')
source('~/Box/repos/single_cell_analysis/scripts/compute_hvgs.R')
source('~/Box/repos/single_cell_analysis/scripts/compute_hvgs.R')
for (i in 1:length(DATA.list)) {
DATA.list[[i]] <- NormalizeData(DATA.list[[i]], verbose = FALSE)
DATA.list[[i]] <- compute_hvgs(DATA.list[[i]],VAR_choice,paste0(opt$output_path,"/var_genes_",names(DATA.list)[i]))
}
source('~/Box/repos/single_cell_analysis/scripts/compute_hvgs.R')
for (i in 1:length(DATA.list)) {
DATA.list[[i]] <- NormalizeData(DATA.list[[i]], verbose = FALSE)
DATA.list[[i]] <- compute_hvgs(DATA.list[[i]],VAR_choice,paste0(opt$output_path,"/var_genes_",names(DATA.list)[i]))
}
source('~/Box/repos/single_cell_analysis/scripts/compute_hvgs.R')
source('~/Box/repos/single_cell_analysis/scripts/compute_hvgs.R')
for (i in 1:length(DATA.list)) {
DATA.list[[i]] <- NormalizeData(DATA.list[[i]], verbose = FALSE)
DATA.list[[i]] <- compute_hvgs(DATA.list[[i]],VAR_choice,paste0(opt$output_path,"/var_genes_",names(DATA.list)[i]))
}
for (i in 1:length(DATA.list)) {
DATA.list[[i]] <- NormalizeData(DATA.list[[i]], verbose = FALSE)
DATA.list[[i]] <- compute_hvgs(DATA.list[[i]],VAR_choice,paste0(opt$output_path,"/var_genes_",names(DATA.list)[i]))
}
source('~/Box/repos/single_cell_analysis/scripts/compute_hvgs.R')
for (i in 1:length(DATA.list)) {
DATA.list[[i]] <- NormalizeData(DATA.list[[i]], verbose = FALSE)
DATA.list[[i]] <- compute_hvgs(DATA.list[[i]],VAR_choice,paste0(opt$output_path,"/var_genes_",names(DATA.list)[i]))
}
# select the most informative genes that are shared across all datasets:
universe <- Reduce(intersect, lapply(DATA.list,function(x){x@assays$RNA@var.features}))
universe
myinput <- lapply(DATA.list,function(x){x@assays$RNA@data[universe,]})
rm(DATA.list)
print(names(myinput))
if(  is.na(integration_method[3]) ) { myinput[["k"]] <- 20
} else { myinput[["k"]] <- as.numeric(integration_method[3]) }
myinput[["approximate"]] <-  TRUE
myinput[["d"]] <-  30
out <- do.call(fastMNN,args = myinput)
out <- t(out$corrected)
colnames(out) <- rownames(DATA@meta.data)
rownames(out) <- paste0("dim",1:myinput$d)
DATA@assays[["integrated"]] <- CreateAssayObject(data = out,min.cells = 0,min.features = 0)
DefaultAssay(DATA) <- "integrated"
DATA@assays$integrated@var.features <- rownames(DATA@assays$integrated@data)
rm(out, myinput);  invisible(gc())
DATA <- ScaleData(DATA)
DATA <- RunPCA(DATA)
DATA <- RunUMAP(DATA,dims = 1:49)
DATA <- RunUMAP(DATA,dim = 1:49)
DATA <- RunPCA(DATA,npcs = 50)
DATA <- RunUMAP(DATA,dim = 1:49)
DATA <- RunUMAP(DATA,dims = 1:49)
DATA <- RunPCA(DATA,npcs = 1:50)
DATA <- RunPCA(DATA,npcs = 50)
DATA <- RunUMAP(DATA,dims = 1:50)
DATA <- RunUMAP(DATA,dims = 1:49)
dim(DATA@reductions$pca@cell.embeddings)
myinput <- lapply(DATA.list,function(x){x@assays$RNA@data[universe,]})
rm(DATA.list)
print(names(myinput))
if(  is.na(integration_method[3]) ) { myinput[["k"]] <- 20
} else { myinput[["k"]] <- as.numeric(integration_method[3]) }
myinput[["approximate"]] <-  TRUE
myinput[["d"]] <-  51
#Applying MNN correction on raw counts
out <- do.call(fastMNN,args = myinput)
out <- t(out$corrected)
colnames(out) <- rownames(DATA@meta.data)
rownames(out) <- paste0("dim",1:myinput$d)
DATA@assays[["integrated"]] <- CreateAssayObject(data = out,min.cells = 0,min.features = 0)
DefaultAssay(DATA) <- "integrated"
DATA@assays$integrated@var.features <- rownames(DATA@assays$integrated@data)
rm(out, myinput);  invisible(gc())
DATA.list <- SplitObject(DATA, split.by = integration_method[2])
myinput <- lapply(DATA.list,function(x){x@assays$RNA@data[universe,]})
rm(DATA.list)
print(names(myinput))
if(  is.na(integration_method[3]) ) { myinput[["k"]] <- 20
} else { myinput[["k"]] <- as.numeric(integration_method[3]) }
myinput[["approximate"]] <-  TRUE
myinput[["d"]] <-  51
#Applying MNN correction on raw counts
out <- do.call(fastMNN,args = myinput)
out <- t(out$corrected)
colnames(out) <- rownames(DATA@meta.data)
rownames(out) <- paste0("dim",1:myinput$d)
DATA@assays[["integrated"]] <- CreateAssayObject(data = out,min.cells = 0,min.features = 0)
DefaultAssay(DATA) <- "integrated"
DATA@assays$integrated@var.features <- rownames(DATA@assays$integrated@data)
rm(out, myinput);  invisible(gc())
DATA <- RunPCA(DATA,npcs = 50)
DATA <- ScaleData(DATA)
DATA <- RunPCA(DATA,npcs = 50)
DATA <- RunUMAP(DATA,dims = 1:50)
UMAPPlot(DATA,group.by="celltype")
colnames(DATA@assays$integrated@data)
colnames(DATA@assays$integrated@data) == rownames(DATA@meta.data)
sum(colnames(DATA@assays$integrated@data) != rownames(DATA@meta.data))
VlnPlot(DATA, c("REG1A", "PPY", "SST", "GHRL", "VWF", "SOX10"), group.by = "predicted.id")
source('~/Box/repos/single_cell_analysis/scripts/compute_hvgs.R')
source('~/Box/repos/single_cell_analysis/scripts/compute_hvgs.R')
DATA <- readRDS("~/Desktop/Desktop_stuff/MyProject/single_cell_analysis/analysis/2_clustering_mnn_scran/Seurat_object.rds")
DATA <- ScaleData(DATA)
DATA <- RunPCA(DATA,npcs = 50)
DATA <- RunUMAP(DATA,dims = 1:50)
UMAPPlot(DATA)
UMAPPlot(DATA,group.by="celltype")
DATA <- readRDS("~/Desktop/Desktop_stuff/MyProject/single_cell_analysis/analysis/2_clustering_mnn_seurat/Seurat_object.rds")
DATA <- ScaleData(DATA)
DATA <- RunPCA(DATA,npcs = 50)
DATA <- RunUMAP(DATA,dims = 1:50)
UMAPPlot(DATA,group.by="celltype")
UMAPPlot(DATA,group.by="tech")
FeaturePlot(DATA,features = "REG1A",reduction = "umap")
FeaturePlot(DATA,features = "PPY",reduction = "umap")
DATA2 <- readRDS("~/Desktop/Desktop_stuff/MyProject/single_cell_analysis/analysis/2_clustering_cca_scran/Seurat_object.rds")
DATA2 <- ScaleData(DATA2)
DATA2 <- RunPCA(DATA2,npcs = 50)
DATA2 <- RunUMAP(DATA2,dims = 1:50)
UMAPPlot(DATA2,group.by="tech")
UMAPPlot(DATA2,group.by="celltype")
FeaturePlot(DATA2,features = "PPY",reduction = "umap")
DATA <- RunUMAP(DATA,features = rownames(DATA@assays$integrated@data),assay = "integrated")
UMAPPlot(DATA,group.by="celltype")
FeaturePlot(DATA,features = "PPY",reduction = "umap")
FeaturePlot(DATA2,features = "CCR2",reduction = "umap")
FeaturePlot(DATA2,features = "CD3G",reduction = "umap")
FeaturePlot(DATA2,features = "COL1A1",reduction = "umap")
FeaturePlot(DATA2,features = "KRT18",reduction = "umap")
FeaturePlot(DATA2,features = "KRT15",reduction = "umap")
FeaturePlot(DATA,features = "COL1A1",reduction = "umap")
FeaturePlot(DATA2,features = "REG1A",reduction = "umap")
FeaturePlot(DATA,features = "REG1A",reduction = "umap")
FeaturePlot(DATA,features = "REG1A",reduction = "umap",order = T)
FeaturePlot(DATA2,features = "REG1A",reduction = "umap",order = T)
FeaturePlot(DATA2,features = "CDHD",reduction = "umap",order = T)
FeaturePlot(DATA2,features = "CDH5",reduction = "umap",order = T)
FeaturePlot(DATA2,features = "VCAM",reduction = "umap",order = T)
FeaturePlot(DATA2,features = "ICAM",reduction = "umap",order = T)
FeaturePlot(DATA2,features = "ICAM1",reduction = "umap",order = T)
FeaturePlot(DATA2,features = "VCAM1",reduction = "umap",order = T)
FeaturePlot(DATA,features = "REG1A",reduction = "umap",order = T)
DATA3 <- DATA
DATA <- readRDS("~/Desktop/Desktop_stuff/MyProject/single_cell_analysis/analysis/1_qc/Filt_Seurat_Object.rds")
DATA.list <- SplitObject(DATA, split.by = integration_method[2])
for (i in 1:length(DATA.list)) {
DATA.list[[i]] <- NormalizeData(DATA.list[[i]], verbose = FALSE)
DATA.list[[i]] <- compute_hvgs(DATA.list[[i]],VAR_choice,paste0(opt$output_path,"/var_genes_",names(DATA.list)[i]))
}
Reduce(intersect, lapply(DATA.list,function(x){x@assays$RNA@var.features}))
a <- lapply(DATA.list,function(x){x@assays$RNA@var.features})
unique(unlist(a))
DATA4 <- readRDS("~/Desktop/Desktop_stuff/MyProject/single_cell_analysis/analysis/2_clustering_cca_seurat/Seurat_object.rds")
DATA4 <- ScaleData(DATA4)
DATA4 <- RunPCA(DATA4,npcs = 50)
DATA4 <- RunUMAP(DATA4,dims = 1:50)
UMAPPlot(DATA4,group.by="celltype")
FeaturePlot(DATA4,features = "PPY",reduction = "umap",order = T)
FeaturePlot(DATA4,features = "CCR2",reduction = "umap",order = T)
FeaturePlot(DATA4,features = "COL1A1",reduction = "umap",order = T)
FeaturePlot(DATA4,features = "KRT15",reduction = "umap",order = T)
FeaturePlot(DATA4,features = "REG1A",reduction = "umap",order = T)
FeaturePlot(DATA2,features = "VCAM1",reduction = "umap",order = T)
DATA3 <- readRDS("~/Desktop/Desktop_stuff/MyProject/single_cell_analysis/analysis/2_clustering_mnn_scran/Seurat_object.rds")
DATA3 <- ScaleData(DATA3)
DATA3 <- RunPCA(DATA3,npcs = 50)
DATA3 <- RunUMAP(DATA3,features = rownames(DATA3@assays$integrated@data),assay = "integrated")
UMAPPlot(DATA3,group.by="celltype")
FeaturePlot(DATA3,features = "PPY",reduction = "umap",order = T)
FeaturePlot(DATA3,features = "COL1A1",reduction = "umap",order = T)
FeaturePlot(DATA3,features = "REG1A",reduction = "umap",order = T)
universe
unique(unlist(lapply(DATA.list,function(x){x@assays$RNA@var.features})))
# select the most informative genes that are shared across all datasets:
#universe <- Reduce(intersect, lapply(DATA.list,function(x){x@assays$RNA@var.features}))
universe <- unique(unlist(lapply(DATA.list,function(x){x@assays$RNA@var.features})))
myinput <- lapply(DATA.list,function(x){x@assays$RNA@data[universe,]})
rm(DATA.list)
print(names(myinput))
if(  is.na(integration_method[3]) ) { myinput[["k"]] <- 50
} else { myinput[["k"]] <- as.numeric(integration_method[3]) }
myinput[["approximate"]] <-  TRUE
myinput[["d"]] <-  length(universe)
out <- do.call(fastMNN,args = myinput)
out <- t(out$corrected)
if(  is.na(integration_method[3]) ) { myinput[["k"]] <- 50
} else { myinput[["k"]] <- as.numeric(integration_method[3]) }
myinput[["approximate"]] <-  TRUE
myinput[["d"]] <-  100
#Applying MNN correction on raw counts
out <- do.call(fastMNN,args = myinput)
out <- t(out$corrected)
out
DATA@meta.data$tech
unique(DATA@meta.data$tech)
DATA@meta.data
unique(DATA@meta.data$tech)
myinput
myinput[1:4]
myinput[[1:4]]
n <- lapply(myinput[1:4],function(x){rownames(x@meta.data)})
n <- lapply(myinput[1:4],function(x){colnames(x)})
n <- lapply(myinput[1:4],function(x){colnames(x)})
n
length(n)
n <- unlist(lapply(myinput[1:4],function(x){colnames(x)}))
length(n)
n %in% colnames(DATA)
length(n)
sum(n %in% colnames(DATA))
out <- do.call(fastMNN,args = myinput)
out <- t(out$corrected)
colnames(out) <- unlist(lapply(myinput[1:4],function(x){colnames(x)}))
out <- out[,colnames(DATA)]
rownames(out) <- paste0("dim",1:myinput$d)
DATA@assays[["integrated"]] <- CreateAssayObject(data = out,min.cells = 0,min.features = 0)
DefaultAssay(DATA) <- "integrated"
DATA@assays$integrated@var.features <- rownames(DATA@assays$integrated@data)
DATA <- ScaleData(DATA)
DATA <- RunPCA(DATA,npcs = 50)
DATA <- RunUMAP(DATA,features = rownames(DATA3@assays$integrated@data),assay = "integrated")
UMAPPlot(DATA,group.by="celltype")
FeaturePlot(DATA,features = "PPY",reduction = "umap",order = T)
FeaturePlot(DATA,features = "COL1A1",reduction = "umap",order = T)
FeaturePlot(DATA,features = "REG1A",reduction = "umap",order = T)
FeaturePlot(DATA4,features = "CCR2",reduction = "umap",order = T)
opt
casefold(opt)
DATA3 <- readRDS("~/Desktop/Desktop_stuff/MyProject/single_cell_analysis/analysis/2_clustering_mnn_scran/Seurat_object.rds")
DATA3 <- ScaleData(DATA3)
DATA3 <- RunPCA(DATA3,npcs = 50)
DATA3 <- RunUMAP(DATA3,features = rownames(DATA3@assays$integrated@data),assay = "integrated")
UMAPPlot(DATA3,group.by="celltype")
DATA <- readRDS("~/Desktop/Desktop_stuff/MyProject/single_cell_analysis/analysis/2_clustering_mnn_scran/Seurat_object.rds")
?RunTSNE
DATA <- RunTSNE(DATA, tsne.method = "FIt-SNE", dims = 1:50)
?fftRtsne
??fftRtsne
?Seurat:fftRtsne
?Seurat::fftRtsne
devtools::source_url("https://github.com/KlugerLab/FIt-SNE/blob/master/fast_tsne.R")
devtools::source_url("https://github.com/KlugerLab/FIt-SNE/blob/master/fast_tsne.R", chdir=T)
source("https://github.com/KlugerLab/FIt-SNE/blob/master/fast_tsne.R", chdir=T)
source("https://raw.githubusercontent.com/KlugerLab/FIt-SNE/master/fast_tsne.R", chdir=T)
source("https://raw.githubusercontent.com/KlugerLab/FIt-SNE/master/fast_tsne.R")
DATA <- RunTSNE(DATA, tsne.method = "FIt-SNE", dims = 1:50)
DATA <- RunTSNE(DATA, tsne.method = "FIt-SNE", dims = 1:50,fast_tsne_path='/Users/paulo.barenco/Box/repos/single_cell_analysis/scripts')
DATA <- RunTSNE(DATA, tsne.method = "FIt-SNE", dims = 1:50,fast_tsne_path='https://raw.githubusercontent.com/KlugerLab/FIt-SNE/master/fast_tsne.R')
download.file('https://raw.githubusercontent.com/KlugerLab/FIt-SNE/master/fast_tsne.R',destfile = '~/Desktop/Desktop_stuff/MyProject/single_cell_analysis/fast_tsne.R')
DATA <- RunTSNE(DATA, tsne.method = "FIt-SNE", dims = 1:50,fast_tsne_path='~/Desktop/Desktop_stuff/MyProject/single_cell_analysis/fast_tsne.R')
source("https://raw.githubusercontent.com/KlugerLab/FIt-SNE/master/fast_tsne.R")
source("~/Desktop/Desktop_stuff/MyProject/single_cell_analysis/FIt-SNE/fast_tsne.R")
source("~/Desktop/Desktop_stuff/MyProject/single_cell_analysis/FIt-SNE/fast_tsne.R",chdir=T)
DATA <- RunTSNE(DATA, tsne.method = "FIt-SNE", dims = 1:50)
DATA <- RunTSNE(DATA, tsne.method = "FIt-SNE", dims = 1:50, fast_tsne_path = "~/Desktop/Desktop_stuff/MyProject/single_cell_analysis/FIt-SNE")
DATA <- RunTSNE(DATA, tsne.method = "FIt-SNE", dims = 1:50, fast_tsne_path = "~/Desktop/Desktop_stuff/MyProject/single_cell_analysis/FIt-SNE/bin/fast_tsne")
source("~/Desktop/Desktop_stuff/MyProject/single_cell_analysis/FIt-SNE/fast_tsne.R",chdir=T)
DATA <- RunTSNE(DATA, tsne.method = "FIt-SNE", dims = 1:50, fast_tsne_path = "~/Desktop/Desktop_stuff/MyProject/single_cell_analysis/FIt-SNE")
DATA <- RunTSNE(DATA, tsne.method = "FIt-SNE", dims = 1:50, fast_tsne_path = "~/Desktop/Desktop_stuff/MyProject/single_cell_analysis/FIt-SNE/")
DATA <- RunTSNE(DATA, tsne.method = "FIt-SNE", dims = 1:50, fast_tsne_path = "~/Desktop/Desktop_stuff/MyProject/single_cell_analysis/FIt-SNE/fast_tsne.R")
DATA <- RunTSNE(DATA, tsne.method = "FIt-SNE", dims = 1:50, fast_tsne_path = "~/Desktop/Desktop_stuff/MyProject/single_cell_analysis/FIt-SNE/bin/fast_tsne")
@rpath
DATA <- RunTSNE(DATA, tsne.method = "FIt-SNE", dims = 1:50, fast_tsne_path = "~/Desktop/Desktop_stuff/MyProject/single_cell_analysis/FIt-SNE/bin/fast_tsne")
system("export DYLD_LIBRARY_PATH=$CONDA_PREFIX/lib")
DATA <- RunTSNE(DATA, tsne.method = "FIt-SNE", dims = 1:50, fast_tsne_path = "~/Desktop/Desktop_stuff/MyProject/single_cell_analysis/FIt-SNE/bin/fast_tsne")
source("~/Desktop/Desktop_stuff/MyProject/single_cell_analysis/FIt-SNE/fast_tsne.R",chdir=T)
DATA <- RunTSNE(DATA, tsne.method = "FIt-SNE", dims = 1:50, fast_tsne_path = "~/Desktop/Desktop_stuff/MyProject/single_cell_analysis/FIt-SNE/bin/fast_tsne")
DATA <- RunTSNE(DATA, tsne.method = "FIt-SNE", dims = 1:50, fast_tsne_path = "~/Desktop/Desktop_stuff/MyProject/single_cell_analysis/FIt-SNE")
DATA <- RunTSNE(DATA, tsne.method = "FIt-SNE", dims = 1:50, fast_tsne_path = "~/Desktop/Desktop_stuff/MyProject/single_cell_analysis/FIt-SNE/bin/fast_tsne")
