DATA <- readRDS("~/Desktop/Desktop_stuff/MyProject/single_cell_analysis/analysis/2_clustering_mnn_scran/Seurat_object.rds")
DATA <- ScaleData(DATA)
DATA <- RunPCA(DATA,npcs = 50)
DATA <- RunUMAP(DATA,dims = 1:50)
UMAPPlot(DATA)
UMAPPlot(DATA,group.by="celltype")
DATA <- readRDS("~/Desktop/Desktop_stuff/MyProject/single_cell_analysis/analysis/2_clustering_mnn_seurat/Seurat_object.rds")
DATA <- ScaleData(DATA)
DATA <- RunPCA(DATA,npcs = 50)
DATA <- RunUMAP(DATA,dims = 1:50)
UMAPPlot(DATA,group.by="celltype")
UMAPPlot(DATA,group.by="tech")
FeaturePlot(DATA,features = "REG1A",reduction = "umap")
FeaturePlot(DATA,features = "PPY",reduction = "umap")
DATA2 <- readRDS("~/Desktop/Desktop_stuff/MyProject/single_cell_analysis/analysis/2_clustering_cca_scran/Seurat_object.rds")
DATA2 <- ScaleData(DATA2)
DATA2 <- RunPCA(DATA2,npcs = 50)
DATA2 <- RunUMAP(DATA2,dims = 1:50)
UMAPPlot(DATA2,group.by="tech")
UMAPPlot(DATA2,group.by="celltype")
FeaturePlot(DATA2,features = "PPY",reduction = "umap")
DATA <- RunUMAP(DATA,features = rownames(DATA@assays$integrated@data),assay = "integrated")
UMAPPlot(DATA,group.by="celltype")
FeaturePlot(DATA,features = "PPY",reduction = "umap")
FeaturePlot(DATA2,features = "CCR2",reduction = "umap")
FeaturePlot(DATA2,features = "CD3G",reduction = "umap")
FeaturePlot(DATA2,features = "COL1A1",reduction = "umap")
FeaturePlot(DATA2,features = "KRT18",reduction = "umap")
FeaturePlot(DATA2,features = "KRT15",reduction = "umap")
FeaturePlot(DATA,features = "COL1A1",reduction = "umap")
FeaturePlot(DATA2,features = "REG1A",reduction = "umap")
FeaturePlot(DATA,features = "REG1A",reduction = "umap")
FeaturePlot(DATA,features = "REG1A",reduction = "umap",order = T)
FeaturePlot(DATA2,features = "REG1A",reduction = "umap",order = T)
FeaturePlot(DATA2,features = "CDHD",reduction = "umap",order = T)
FeaturePlot(DATA2,features = "CDH5",reduction = "umap",order = T)
FeaturePlot(DATA2,features = "VCAM",reduction = "umap",order = T)
FeaturePlot(DATA2,features = "ICAM",reduction = "umap",order = T)
FeaturePlot(DATA2,features = "ICAM1",reduction = "umap",order = T)
FeaturePlot(DATA2,features = "VCAM1",reduction = "umap",order = T)
FeaturePlot(DATA,features = "REG1A",reduction = "umap",order = T)
DATA3 <- DATA
DATA <- readRDS("~/Desktop/Desktop_stuff/MyProject/single_cell_analysis/analysis/1_qc/Filt_Seurat_Object.rds")
DATA.list <- SplitObject(DATA, split.by = integration_method[2])
for (i in 1:length(DATA.list)) {
DATA.list[[i]] <- NormalizeData(DATA.list[[i]], verbose = FALSE)
DATA.list[[i]] <- compute_hvgs(DATA.list[[i]],VAR_choice,paste0(opt$output_path,"/var_genes_",names(DATA.list)[i]))
}
Reduce(intersect, lapply(DATA.list,function(x){x@assays$RNA@var.features}))
a <- lapply(DATA.list,function(x){x@assays$RNA@var.features})
unique(unlist(a))
DATA4 <- readRDS("~/Desktop/Desktop_stuff/MyProject/single_cell_analysis/analysis/2_clustering_cca_seurat/Seurat_object.rds")
DATA4 <- ScaleData(DATA4)
DATA4 <- RunPCA(DATA4,npcs = 50)
DATA4 <- RunUMAP(DATA4,dims = 1:50)
UMAPPlot(DATA4,group.by="celltype")
FeaturePlot(DATA4,features = "PPY",reduction = "umap",order = T)
FeaturePlot(DATA4,features = "CCR2",reduction = "umap",order = T)
FeaturePlot(DATA4,features = "COL1A1",reduction = "umap",order = T)
FeaturePlot(DATA4,features = "KRT15",reduction = "umap",order = T)
FeaturePlot(DATA4,features = "REG1A",reduction = "umap",order = T)
FeaturePlot(DATA2,features = "VCAM1",reduction = "umap",order = T)
DATA3 <- readRDS("~/Desktop/Desktop_stuff/MyProject/single_cell_analysis/analysis/2_clustering_mnn_scran/Seurat_object.rds")
DATA3 <- ScaleData(DATA3)
DATA3 <- RunPCA(DATA3,npcs = 50)
DATA3 <- RunUMAP(DATA3,features = rownames(DATA3@assays$integrated@data),assay = "integrated")
UMAPPlot(DATA3,group.by="celltype")
FeaturePlot(DATA3,features = "PPY",reduction = "umap",order = T)
FeaturePlot(DATA3,features = "COL1A1",reduction = "umap",order = T)
FeaturePlot(DATA3,features = "REG1A",reduction = "umap",order = T)
universe
unique(unlist(lapply(DATA.list,function(x){x@assays$RNA@var.features})))
# select the most informative genes that are shared across all datasets:
#universe <- Reduce(intersect, lapply(DATA.list,function(x){x@assays$RNA@var.features}))
universe <- unique(unlist(lapply(DATA.list,function(x){x@assays$RNA@var.features})))
myinput <- lapply(DATA.list,function(x){x@assays$RNA@data[universe,]})
rm(DATA.list)
print(names(myinput))
if(  is.na(integration_method[3]) ) { myinput[["k"]] <- 50
} else { myinput[["k"]] <- as.numeric(integration_method[3]) }
myinput[["approximate"]] <-  TRUE
myinput[["d"]] <-  length(universe)
out <- do.call(fastMNN,args = myinput)
out <- t(out$corrected)
if(  is.na(integration_method[3]) ) { myinput[["k"]] <- 50
} else { myinput[["k"]] <- as.numeric(integration_method[3]) }
myinput[["approximate"]] <-  TRUE
myinput[["d"]] <-  100
#Applying MNN correction on raw counts
out <- do.call(fastMNN,args = myinput)
out <- t(out$corrected)
out
DATA@meta.data$tech
unique(DATA@meta.data$tech)
DATA@meta.data
unique(DATA@meta.data$tech)
myinput
myinput[1:4]
myinput[[1:4]]
n <- lapply(myinput[1:4],function(x){rownames(x@meta.data)})
n <- lapply(myinput[1:4],function(x){colnames(x)})
n <- lapply(myinput[1:4],function(x){colnames(x)})
n
length(n)
n <- unlist(lapply(myinput[1:4],function(x){colnames(x)}))
length(n)
n %in% colnames(DATA)
length(n)
sum(n %in% colnames(DATA))
out <- do.call(fastMNN,args = myinput)
out <- t(out$corrected)
colnames(out) <- unlist(lapply(myinput[1:4],function(x){colnames(x)}))
out <- out[,colnames(DATA)]
rownames(out) <- paste0("dim",1:myinput$d)
DATA@assays[["integrated"]] <- CreateAssayObject(data = out,min.cells = 0,min.features = 0)
DefaultAssay(DATA) <- "integrated"
DATA@assays$integrated@var.features <- rownames(DATA@assays$integrated@data)
DATA <- ScaleData(DATA)
DATA <- RunPCA(DATA,npcs = 50)
DATA <- RunUMAP(DATA,features = rownames(DATA3@assays$integrated@data),assay = "integrated")
UMAPPlot(DATA,group.by="celltype")
FeaturePlot(DATA,features = "PPY",reduction = "umap",order = T)
FeaturePlot(DATA,features = "COL1A1",reduction = "umap",order = T)
FeaturePlot(DATA,features = "REG1A",reduction = "umap",order = T)
FeaturePlot(DATA4,features = "CCR2",reduction = "umap",order = T)
opt
casefold(opt)
DATA3 <- readRDS("~/Desktop/Desktop_stuff/MyProject/single_cell_analysis/analysis/2_clustering_mnn_scran/Seurat_object.rds")
DATA3 <- ScaleData(DATA3)
DATA3 <- RunPCA(DATA3,npcs = 50)
DATA3 <- RunUMAP(DATA3,features = rownames(DATA3@assays$integrated@data),assay = "integrated")
UMAPPlot(DATA3,group.by="celltype")
DATA <- readRDS("~/Desktop/Desktop_stuff/MyProject/single_cell_analysis/analysis/2_clustering_mnn_scran/Seurat_object.rds")
?RunTSNE
DATA <- RunTSNE(DATA, tsne.method = "FIt-SNE", dims = 1:50)
?fftRtsne
??fftRtsne
?Seurat:fftRtsne
?Seurat::fftRtsne
devtools::source_url("https://github.com/KlugerLab/FIt-SNE/blob/master/fast_tsne.R")
devtools::source_url("https://github.com/KlugerLab/FIt-SNE/blob/master/fast_tsne.R", chdir=T)
source("https://github.com/KlugerLab/FIt-SNE/blob/master/fast_tsne.R", chdir=T)
source("https://raw.githubusercontent.com/KlugerLab/FIt-SNE/master/fast_tsne.R", chdir=T)
source("https://raw.githubusercontent.com/KlugerLab/FIt-SNE/master/fast_tsne.R")
DATA <- RunTSNE(DATA, tsne.method = "FIt-SNE", dims = 1:50)
DATA <- RunTSNE(DATA, tsne.method = "FIt-SNE", dims = 1:50,fast_tsne_path='/Users/paulo.barenco/Box/repos/single_cell_analysis/scripts')
DATA <- RunTSNE(DATA, tsne.method = "FIt-SNE", dims = 1:50,fast_tsne_path='https://raw.githubusercontent.com/KlugerLab/FIt-SNE/master/fast_tsne.R')
download.file('https://raw.githubusercontent.com/KlugerLab/FIt-SNE/master/fast_tsne.R',destfile = '~/Desktop/Desktop_stuff/MyProject/single_cell_analysis/fast_tsne.R')
DATA <- RunTSNE(DATA, tsne.method = "FIt-SNE", dims = 1:50,fast_tsne_path='~/Desktop/Desktop_stuff/MyProject/single_cell_analysis/fast_tsne.R')
source("https://raw.githubusercontent.com/KlugerLab/FIt-SNE/master/fast_tsne.R")
source("~/Desktop/Desktop_stuff/MyProject/single_cell_analysis/FIt-SNE/fast_tsne.R")
source("~/Desktop/Desktop_stuff/MyProject/single_cell_analysis/FIt-SNE/fast_tsne.R",chdir=T)
DATA <- RunTSNE(DATA, tsne.method = "FIt-SNE", dims = 1:50)
DATA <- RunTSNE(DATA, tsne.method = "FIt-SNE", dims = 1:50, fast_tsne_path = "~/Desktop/Desktop_stuff/MyProject/single_cell_analysis/FIt-SNE")
DATA <- RunTSNE(DATA, tsne.method = "FIt-SNE", dims = 1:50, fast_tsne_path = "~/Desktop/Desktop_stuff/MyProject/single_cell_analysis/FIt-SNE/bin/fast_tsne")
source("~/Desktop/Desktop_stuff/MyProject/single_cell_analysis/FIt-SNE/fast_tsne.R",chdir=T)
DATA <- RunTSNE(DATA, tsne.method = "FIt-SNE", dims = 1:50, fast_tsne_path = "~/Desktop/Desktop_stuff/MyProject/single_cell_analysis/FIt-SNE")
DATA <- RunTSNE(DATA, tsne.method = "FIt-SNE", dims = 1:50, fast_tsne_path = "~/Desktop/Desktop_stuff/MyProject/single_cell_analysis/FIt-SNE/")
DATA <- RunTSNE(DATA, tsne.method = "FIt-SNE", dims = 1:50, fast_tsne_path = "~/Desktop/Desktop_stuff/MyProject/single_cell_analysis/FIt-SNE/fast_tsne.R")
DATA <- RunTSNE(DATA, tsne.method = "FIt-SNE", dims = 1:50, fast_tsne_path = "~/Desktop/Desktop_stuff/MyProject/single_cell_analysis/FIt-SNE/bin/fast_tsne")
@rpath
DATA <- RunTSNE(DATA, tsne.method = "FIt-SNE", dims = 1:50, fast_tsne_path = "~/Desktop/Desktop_stuff/MyProject/single_cell_analysis/FIt-SNE/bin/fast_tsne")
system("export DYLD_LIBRARY_PATH=$CONDA_PREFIX/lib")
DATA <- RunTSNE(DATA, tsne.method = "FIt-SNE", dims = 1:50, fast_tsne_path = "~/Desktop/Desktop_stuff/MyProject/single_cell_analysis/FIt-SNE/bin/fast_tsne")
source("~/Desktop/Desktop_stuff/MyProject/single_cell_analysis/FIt-SNE/fast_tsne.R",chdir=T)
DATA <- RunTSNE(DATA, tsne.method = "FIt-SNE", dims = 1:50, fast_tsne_path = "~/Desktop/Desktop_stuff/MyProject/single_cell_analysis/FIt-SNE/bin/fast_tsne")
DATA <- RunTSNE(DATA, tsne.method = "FIt-SNE", dims = 1:50, fast_tsne_path = "~/Desktop/Desktop_stuff/MyProject/single_cell_analysis/FIt-SNE")
DATA <- RunTSNE(DATA, tsne.method = "FIt-SNE", dims = 1:50, fast_tsne_path = "~/Desktop/Desktop_stuff/MyProject/single_cell_analysis/FIt-SNE/bin/fast_tsne")
library(Seurat)
opt <- list()
opt$Seurat_object_path <- '~/Desktop/Desktop_stuff/MyProject/single_cell_analysis/analysis/2_clustering_mnn_scran/Seurat_object.rds'
DATA <- readRDS(opt$Seurat_object_path)
opt$clustering_use <- ""
opt$clustering_use <- "HC_50"
###################################################################
### Finding differentially expressed genes (cluster biomarkers) ###
###################################################################
DATA@ident <- factor(NULL)
DATA@active.ident
###################################################################
### Finding differentially expressed genes (cluster biomarkers) ###
###################################################################
DATA@active.ident <- factor(NULL)
DATA <- SetIdent(DATA,ident.use = DATA@meta.data[,opt$clustering_use])
DATA@meta.data[,opt$clustering_use]
DATA <- SetIdent(DATA,ident.use = DATA@meta.data[,opt$clustering_use])
DATA <- SetIdent(DATA,value = DATA@meta.data[,opt$clustering_use])
DATA@cell.names
colnames(DATA)
###Correlation between cluster mean expression
#---------
cat("\nCopputing cluster average correlation ...\n")
DefaultAssay(DATA)
avg <- t(rowsum(t(as.matrix(DATA@assays$RNA@data)) , group = DATA@active.ident))
avg <- avg[ rowSums(avg  > .5 ) > 1, ]
dim(avg)
avg <- t(t(avg) / as.numeric(table(DATA@active.ident)) )
hvgs <- DATA@assays$RNA@var.features[ DATA@assays$RNA@var.features %in% rownames(avg)]
cors <- cor(avg[hvgs,],method = "pearson")
cors
rownames(avg)
DATA@assays$RNA@var.features
DATA@assays$RNA@var.features
DATA@assays$integrated@var.features
DATA@active.assay
avg <- t(rowsum(t(as.matrix(DATA@assays[[DATA@active.assay]]@data)) , group = DATA@active.ident))
avg <- avg[ rowSums(avg  > .5 ) > 1, ]
dim(avg)
avg <- t(t(avg) / as.numeric(table(DATA@active.ident)) )
cat("\nCopputing cluster average correlation ...\n")
avg <- t(rowsum(t(as.matrix(DATA@assays[[DATA@active.assay]]@data)) , group = DATA@active.ident))
avg <- avg[ rowSums(avg  > .5 ) > 1, ]
dim(avg)
avg <- t(t(avg) / as.numeric(table(DATA@active.ident)) )
hvgs <- DATA@assays[[DATA@active.assay]]@var.features[ DATA@assays[[DATA@active.assay]]@var.features %in% rownames(avg)]
cors <- cor(avg[hvgs,],method = "pearson")
cors
library(pheatmap)
pheatmap(cors,cluster_rows = F,cluster_cols = F,colorRampPalette(c("grey95","grey80","firebrick"))(50),scale = "none",border="white",display_numbers = T)
sc_data <- as.matrix(DATA@assays[[DATA@active.assay]]@data)
hvgs <- DATA@assays[[DATA@active.assay]]@var.features[ DATA@assays[[DATA@active.assay]]@var.features %in% rownames(avg)]
#Compute correlations
cor_data <- list()
for( i in sort(as.character(unique(DATA@active.ident))) ){
temp <- apply(sc_data,2,function(x){ cor(avg[hvgs,i], x[hvgs],method = "pearson",use = "complete.obs") })
cor_data[[i]] <- temp
}
cor_data
n <- length(unique(as.character(DATA@active.ident)))
par(mar=c(1.5,1.5,3,5), mfrow=c(ceiling(n / 4),4))
for( i in sort(unique(as.character(DATA@active.ident))) ){
myCorGrad <- colorRampPalette(c("gray85","gray85","gray70","orange3","firebrick","red"))(10)
lim <- max(cor_data[[i]]^2)
temp_cor_data1 <- ((cor_data[[i]]^2) - 0) / (lim - 0)
temp_cor_data1[temp_cor_data1>1] <- 1
plot(DATA@reductions$umap@cell.embeddings,pch=20,cex=0.8, line=0.5, col=myCorGrad[ round(temp_cor_data1*9)+1], yaxt="n",xaxt="n",xlab="tSNE1",ylab="tSNE2",lwd=0.25, main=paste0("Cor. to Cluster ",i))
image.plot(1,1,cbind(0,lim),legend.only = T,col = myCorGrad)
}
sort(unique(as.character(DATA@active.ident)))
i
myCorGrad <- colorRampPalette(c("gray85","gray85","gray70","orange3","firebrick","red"))(10)
lim <- max(cor_data[[i]]^2)
temp_cor_data1 <- ((cor_data[[i]]^2) - 0) / (lim - 0)
temp_cor_data1[temp_cor_data1>1] <- 1
plot(DATA@reductions$umap@cell.embeddings,pch=20,cex=0.8, line=0.5, col=myCorGrad[ round(temp_cor_data1*9)+1], yaxt="n",xaxt="n",xlab="tSNE1",ylab="tSNE2",lwd=0.25, main=paste0("Cor. to Cluster ",i))
opt$output_path <- "~/Desktop/Desktop_stuff/MyProject/single_cell_analysis/analysis/2_clustering_mnn_scran/cluster_correlations"
cat("\nPlotting ...\n")
n <- length(unique(as.character(DATA@active.ident)))
png(filename = paste0(opt$output_path,"/Single_cell_Cluster_correlation_heatmap.png"),width = 400*4,height = 350*ceiling(n / 4),res = 150)
par(mar=c(1.5,1.5,3,5), mfrow=c(ceiling(n / 4),4))
for( i in sort(unique(as.character(DATA@active.ident))) ){
myCorGrad <- colorRampPalette(c("gray85","gray85","gray70","orange3","firebrick","red"))(10)
lim <- max(cor_data[[i]]^2)
temp_cor_data1 <- ((cor_data[[i]]^2) - 0) / (lim - 0)
temp_cor_data1[temp_cor_data1>1] <- 1
plot(DATA@reductions$umap@cell.embeddings,pch=20,cex=0.8, line=0.5, col=myCorGrad[ round(temp_cor_data1*9)+1], yaxt="n",xaxt="n",xlab="tSNE1",ylab="tSNE2",lwd=0.25, main=paste0("Cor. to Cluster ",i))
image.plot(1,1,cbind(0,lim),legend.only = T,col = myCorGrad)
}
dev.off()
dir.create("opt$output_path",recursive = T)
cat("\nPlotting ...\n")
n <- length(unique(as.character(DATA@active.ident)))
png(filename = paste0(opt$output_path,"/Single_cell_Cluster_correlation_heatmap.png"),width = 400*4,height = 350*ceiling(n / 4),res = 150)
par(mar=c(1.5,1.5,3,5), mfrow=c(ceiling(n / 4),4))
for( i in sort(unique(as.character(DATA@active.ident))) ){
myCorGrad <- colorRampPalette(c("gray85","gray85","gray70","orange3","firebrick","red"))(10)
lim <- max(cor_data[[i]]^2)
temp_cor_data1 <- ((cor_data[[i]]^2) - 0) / (lim - 0)
temp_cor_data1[temp_cor_data1>1] <- 1
plot(DATA@reductions$umap@cell.embeddings,pch=20,cex=0.8, line=0.5, col=myCorGrad[ round(temp_cor_data1*9)+1], yaxt="n",xaxt="n",xlab="tSNE1",ylab="tSNE2",lwd=0.25, main=paste0("Cor. to Cluster ",i))
image.plot(1,1,cbind(0,lim),legend.only = T,col = myCorGrad)
}
dev.off()
source( paste0(script_path,"/inst_packages.R") )
library(fields)
#Plotting
cat("\nPlotting ...\n")
n <- length(unique(as.character(DATA@active.ident)))
png(filename = paste0(opt$output_path,"/Single_cell_Cluster_correlation_heatmap.png"),width = 400*4,height = 350*ceiling(n / 4),res = 150)
par(mar=c(1.5,1.5,3,5), mfrow=c(ceiling(n / 4),4))
for( i in sort(unique(as.character(DATA@active.ident))) ){
myCorGrad <- colorRampPalette(c("gray85","gray85","gray70","orange3","firebrick","red"))(10)
lim <- max(cor_data[[i]]^2)
temp_cor_data1 <- ((cor_data[[i]]^2) - 0) / (lim - 0)
temp_cor_data1[temp_cor_data1>1] <- 1
plot(DATA@reductions$umap@cell.embeddings,pch=20,cex=0.8, line=0.5, col=myCorGrad[ round(temp_cor_data1*9)+1], yaxt="n",xaxt="n",xlab="tSNE1",ylab="tSNE2",lwd=0.25, main=paste0("Cor. to Cluster ",i))
image.plot(1,1,cbind(0,lim),legend.only = T,col = myCorGrad)
}
dev.off()
dir.create(opt$output_path,recursive = T)
cat("\nPlotting ...\n")
n <- length(unique(as.character(DATA@active.ident)))
png(filename = paste0(opt$output_path,"/Single_cell_Cluster_correlation_heatmap.png"),width = 400*4,height = 350*ceiling(n / 4),res = 150)
par(mar=c(1.5,1.5,3,5), mfrow=c(ceiling(n / 4),4))
for( i in sort(unique(as.character(DATA@active.ident))) ){
myCorGrad <- colorRampPalette(c("gray85","gray85","gray70","orange3","firebrick","red"))(10)
lim <- max(cor_data[[i]]^2)
temp_cor_data1 <- ((cor_data[[i]]^2) - 0) / (lim - 0)
temp_cor_data1[temp_cor_data1>1] <- 1
plot(DATA@reductions$umap@cell.embeddings,pch=20,cex=0.8, line=0.5, col=myCorGrad[ round(temp_cor_data1*9)+1], yaxt="n",xaxt="n",xlab="tSNE1",ylab="tSNE2",lwd=0.25, main=paste0("Cor. to Cluster ",i))
image.plot(1,1,cbind(0,lim),legend.only = T,col = myCorGrad)
}
dev.off()
cat("\nPlotting ...\n")
n <- length(unique(as.character(DATA@active.ident)))
png(filename = paste0(opt$output_path,"/Single_cell_Cluster_correlation_heatmap.png"),width = 400*8,height = 350*ceiling(n / 8),res = 150)
par(mar=c(1.5,1.5,3,5), mfrow=c(ceiling(n / 8),8))
for( i in sort(unique(as.character(DATA@active.ident))) ){
myCorGrad <- colorRampPalette(c("gray85","gray85","gray70","orange3","firebrick","red"))(10)
lim <- max(cor_data[[i]]^2)
temp_cor_data1 <- ((cor_data[[i]]^2) - 0) / (lim - 0)
temp_cor_data1[temp_cor_data1>1] <- 1
plot(DATA@reductions$umap@cell.embeddings,pch=20,cex=0.8, line=0.5, col=myCorGrad[ round(temp_cor_data1*9)+1], yaxt="n",xaxt="n",xlab="tSNE1",ylab="tSNE2",lwd=0.25, main=paste0("Cor. to Cluster ",i))
image.plot(1,1,cbind(0,lim),legend.only = T,col = myCorGrad)
}
dev.off()
cat("\nPlotting ...\n")
n <- length(unique(as.character(DATA@active.ident)))
png(filename = paste0(opt$output_path,"/Single_cell_Cluster_correlation_heatmap.png"),width = 400*8,height = 350*ceiling(n / 8),res = 150)
par(mar=c(1.5,1.5,3,5), mfrow=c(ceiling(n / 8),8))
for( i in sort(unique(as.character(DATA@active.ident))) ){
myCorGrad <- colorRampPalette(c("gray85","gray85","gray70","orange3","firebrick","red"))(10)
lim <- max(cor_data[[i]]^2)
temp_cor_data1 <- ((cor_data[[i]]^2) - 0) / (lim - 0)
temp_cor_data1[temp_cor_data1>1] <- 1
o <- order(temp_cor_data1)
plot(DATA@reductions$umap@cell.embeddings[o,],pch=20,cex=0.5, line=0.5, col=myCorGrad[ round(temp_cor_data1[o]*9)+1], yaxt="n",xaxt="n",xlab="tSNE1",ylab="tSNE2",lwd=0.25, main=paste0("Cor. to Cluster ",i))
image.plot(1,1,cbind(0,lim),legend.only = T,col = myCorGrad)
}
dev.off()
cat("\nMerging clusters ...\n")
merge_par <- as.numeric(unlist(strsplit(opt$merge,",")))
for(j in merge_par){
if( j > min(cors) ){
tcors <- (cors > j)*1
cell_clust <- DATA@active.ident
clust <- rownames(tcors)
for( i in clust){
sel <- rownames(tcors)[ tcors[i,] > 0 ]
cell_clust[cell_clust %in% sel] <- sel[1]
}
DATA <- AddMetaData(object = DATA, metadata = cell_clust, col.name = paste0("merged.",j))
# png(filename = paste0(opt$output_path,"/tSNE_merged.",j,".png"),width = 700,height = 600,res = 150)
# TSNEPlot(object = DATA, group.by=paste0("merged.",j), pt.size = .5, plot.title= paste0("Clustering (merged.",j,")"))
# dev.off()
}
}
opt$merge <- ".7,.8,.9,.95"
merge_par <- as.numeric(unlist(strsplit(opt$merge,",")))
merge_par
for(j in merge_par){
if( j > min(cors) ){
tcors <- (cors > j)*1
cell_clust <- DATA@active.ident
clust <- rownames(tcors)
for( i in clust){
sel <- rownames(tcors)[ tcors[i,] > 0 ]
cell_clust[cell_clust %in% sel] <- sel[1]
}
DATA <- AddMetaData(object = DATA, metadata = cell_clust, col.name = paste0("merged.",j))
# png(filename = paste0(opt$output_path,"/tSNE_merged.",j,".png"),width = 700,height = 600,res = 150)
# TSNEPlot(object = DATA, group.by=paste0("merged.",j), pt.size = .5, plot.title= paste0("Clustering (merged.",j,")"))
# dev.off()
}
}
cat("\nMerging clusters ...\n")
merge_par <- as.numeric(unlist(strsplit(opt$merge,",")))
for(j in merge_par){
if( j > min(cors) ){
tcors <- (cors > j)*1
cell_clust <- DATA@active.ident
clust <- rownames(tcors)
for( i in clust){
sel <- rownames(tcors)[ tcors[i,] > 0 ]
cell_clust[cell_clust %in% sel] <- sel[1]
}
DATA <- AddMetaData(object = DATA, metadata = cell_clust, col.name = paste0("merged.",j))
png(filename = paste0(opt$output_path,"/tSNE_merged.",j,".png"),width = 700,height = 600,res = 150)
UMAPPlot(object = DATA, group.by=paste0("merged.",j), pt.size = .5, plot.title= paste0("Clustering (merged.",j,")"))
dev.off()
}
}
opt$output_path
j
min(cors)
DATA@active.ident
cat("\nMerging clusters ...\n")
merge_par <- as.numeric(unlist(strsplit(opt$merge,",")))
for(j in merge_par){
if( j > min(cors) ){
tcors <- (cors > j)*1
cell_clust <- DATA@active.ident
clust <- rownames(tcors)
for( i in clust){
sel <- rownames(tcors)[ tcors[i,] > 0 ]
cell_clust[cell_clust %in% sel] <- sel[1]
}
DATA <- AddMetaData(object = DATA, metadata = cell_clust, col.name = paste0("merged.",j))
png(filename = paste0(opt$output_path,"/UMAP_merged.",j,".png"),width = 700,height = 600,res = 150)
UMAPPlot(object = DATA, group.by=paste0("merged.",j), pt.size = .5, plot.title= paste0("Clustering (merged.",j,")"))
invisible(dev.off())
}
}
paste0(opt$output_path,"/UMAP_merged.",j,".png")
invisible(dev.off())
invisible(dev.off())
invisible(dev.off())
UMAPPlot(object = DATA, group.by=paste0("merged.",j), pt.size = .5, plot.title= paste0("Clustering (merged.",j,")"))
png(filename = paste0(opt$output_path,"/UMAP_merged.",j,".png"),width = 700,height = 600,res = 150)
UMAPPlot(object = DATA, group.by=paste0("merged.",j), pt.size = .5, plot.title= paste0("Clustering (merged.",j,")"))
invisible(dev.off())
cat("\nMerging clusters ...\n")
merge_par <- as.numeric(unlist(strsplit(opt$merge,",")))
for(j in merge_par){
if( j > min(cors) ){
tcors <- (cors > j)*1
cell_clust <- DATA@active.ident
clust <- rownames(tcors)
for( i in clust){
sel <- rownames(tcors)[ tcors[i,] > 0 ]
cell_clust[cell_clust %in% sel] <- sel[1]
}
DATA <- AddMetaData(object = DATA, metadata = cell_clust, col.name = paste0("merged.",j))
png(filename = paste0(opt$output_path,"/UMAP_merged.",j,".png"),width = 700,height = 600,res = 150)
print(UMAPPlot(object = DATA, group.by=paste0("merged.",j), pt.size = .5, plot.title= paste0("Clustering (merged.",j,")")))
invisible(dev.off())
}
}
#---------
temp <- UMAPPlot(object = DATA, group.by=paste0("merged.",j), pt.size = .5, plot.title= paste0("Clustering (merged.",j,")"))
ggsave(temp,filename = paste0(opt$output_path,"/UMAP_merged.",j,".png"), path = paste0(opt$output_path,"/",i,"_plots"), dpi = 300,units = "mm",width = 170,height = 150 )
library(ggplot2)
ggsave(temp,filename = paste0(opt$output_path,"/UMAP_merged.",j,".png"), path = paste0(opt$output_path,"/",i,"_plots"), dpi = 300,units = "mm",width = 170,height = 150 )
ggsave(temp,filename = paste0(opt$output_path,"/UMAP_merged.",j,".png"), path = paste0(opt$output_path,"/",i,"_plots"), dpi = 300,units = "mm",width = 170,height = 150 )
invisible(dev.off())
invisible(dev.off())
invisible(dev.off())
invisible(dev.off())
ggsave(temp,filename = paste0("UMAP_merged.",j,".png"), path = opt$output_path, dpi = 300,units = "mm",width = 170,height = 150 )
for(j in merge_par){
if( j > min(cors) ){
tcors <- (cors > j)*1
cell_clust <- DATA@active.ident
clust <- rownames(tcors)
for( i in clust){
sel <- rownames(tcors)[ tcors[i,] > 0 ]
cell_clust[cell_clust %in% sel] <- sel[1]
}
DATA <- AddMetaData(object = DATA, metadata = cell_clust, col.name = paste0("merged.",j))
temp <- UMAPPlot(object = DATA, group.by=paste0("merged.",j), pt.size = .5, plot.title= paste0("Clustering (merged.",j,")"))
ggsave(temp,filename = paste0("UMAP_merged.",j,".png"), path = opt$output_path, dpi = 300,units = "mm",width = 170,height = 150 )
}
}
seq(2,100,length.out = 50)
DATA@reductions[["UMAP10"]]
DATA@reductions[["UMAP11"]]
source("~/Desktop/Desktop_stuff/MyProject/single_cell_analysis/FIt-SNE/fast_tsne.R")
source("~/Desktop/Desktop_stuff/MyProject/single_cell_analysis/FIt-SNE/fast_tsne.R",chdir = T)
aa <- RunTSNE(DATA,tsne.method = "FIt-SNE")
aa <- RunTSNE(DATA,tsne.method = "FIt-SNE",fast_tsne_path = "/Users/paulo.barenco/miniconda3/envs/Sauron.v1/lib/")
aa <- RunTSNE(DATA,tsne.method = "FIt-SNE",fast_tsne_path = "/Users/paulo.barenco/miniconda3/envs/Sauron.v1/lib/fast_tsne")
aa <- fftRtsne(DATA@reductions$pca@cell.embeddings)
aa <- fftRtsne(DATA@reductions$pca@cell.embeddings,fast_tsne_path = "~/Desktop/Desktop_stuff/MyProject/single_cell_analysis/FIt-SNE/bin/fast_tsne")
system("$CONDA_PREFIX")
system("$DYLD_LIBRARY_PATH")
system("echo $DYLD_LIBRARY_PATH")
system("DYLD_LIBRARY_PATH=$CONDA_PREFIX/lib")
aa <- fftRtsne(DATA@reductions$pca@cell.embeddings,fast_tsne_path = "~/Desktop/Desktop_stuff/MyProject/single_cell_analysis/FIt-SNE/bin/fast_tsne")
source("~/Desktop/Desktop_stuff/MyProject/single_cell_analysis/FIt-SNE/fast_tsne.R",chdir = T)
aa <- fftRtsne(DATA@reductions$pca@cell.embeddings,fast_tsne_path = "~/Desktop/Desktop_stuff/MyProject/single_cell_analysis/FIt-SNE/bin/fast_tsne")
a <- readRDS("~/Desktop/Desktop_stuff/MyProject/single_cell_analysis/analysis/2_clustering_mnn_scran/Seurat_object.rds")
UMAPPlot(a,group.by="HC_12")
t1 <- Sys.time()
cors <- cor(t(a@reductions$pca@cell.embeddings[,1:20]))
Sys.time()-t1
cors[1:5,1:5]
t1 <- Sys.time()
cell_names <- colnames(cors)
tt <- lapply(as.data.frame(cors),function(x){ sort(setNames(x , cell_names),T)[1:50] })
tt <- lapply(tt,function(x){ x[x > 0.6] })
tt[1:5]
t1 <- Sys.time()
cell_names <- colnames(cors)
tt <- lapply(as.data.frame(cors),function(x){ sort(setNames(x , cell_names),T)[1:50] })
tt <- lapply(tt,function(x){ x[x > 0.6] })
tt[1:5]
ttt <- unlist(tt)
ttt[1:5]
c <- unlist(strsplit(names(unlist(tt)),split = "[.]"))
length(c)
all_g <- graph( c(t(c)) ,directed = F)
table(degree(all_g))
Sys.time()-t1
library(igraph)
library(scales)
library(dbscan)
library(flowPeaks)
t1 <- Sys.time()
cell_names <- colnames(cors)
tt <- lapply(as.data.frame(cors),function(x){ sort(setNames(x , cell_names),T)[1:50] })
tt <- lapply(tt,function(x){ x[x > 0.6] })
tt[1:5]
ttt <- unlist(tt)
ttt[1:5]
c <- unlist(strsplit(names(unlist(tt)),split = "[.]"))
length(c)
all_g <- graph( c(t(c)) ,directed = F)
table(degree(all_g))
Sys.time()-t1
all_g
set.seed(1)
k <- layout_nicely(all_g,dim = 2)
